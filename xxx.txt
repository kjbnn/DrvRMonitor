
// {$A-}
unit eventConvertor;

interface

procedure Convert(typeSource, idIvent: Integer; out typeDevice, Code: word);

implementation

procedure Convert(typeSource, idIvent: Integer; out typeDevice, Code: word);
begin
  case typeSource of
    1:
      case idIvent of
        1:
          ;
      end;
  end;
  {
    R8_CONNECT_FALSE                   = 9100;         //Потеря связи с панелью+
    R8_CONNECT_TRUE                    = 9101;         //Восстановление связи с панелью+
    R8_PANEL_FALSE                     = 9102;         //Отказ панели+
    R8_PANEL_TRUE                      = 9103;         //Панель в норме+
    R8_COMMAND_PANEL_REFRESH           = 9104;         //Запрос на чтение состояний зон и разделов ( драйвер отвечает STATE_... )+
    R8_COMMAND_SH_ARMED                = 9105;         //Поставить на охрану зону+
    R8_COMMAND_SH_DISARMED             = 9106;         //Снять с охраны зону+
    R8_COMMAND_SH_BYPASS_ON            = 9107;         //Обход зоны включен+
    R8_COMMAND_SH_BYPASS_OFF           = 9108;         //Обход зоны выключен+
    R8_COMMAND_SH_ALARM_RESET          = 9109;         //Сбросить тревогу зоны+
    R8_SH_ARMED                        = 9110;         //ШС под охраной+
    R8_SH_DISARMED                     = 9111;         //ШС без охраны+
    R8_SH_READY                        = 9112;         //ШС готова+
    R8_SH_NOTREADY                     = 9113;         //ШС не готова+
    R8_SH_CHECK                        = 9114;         //ШС не исправна+
    R8_SH_ALARM                        = 9115;         //ШС в тревоге+
    R8_SH_ALARM_RESET                  = 9116;         //ШС тревога сброшена+
    R8_SH_BYPASS_ON                    = 9117;         //ШС в BYPASSe+
    R8_SH_BYPASS_OFF                   = 9118;         //ШС вышла из BYPASSа+
    R8_SH_CONNECT_ON                   = 9119;         //ШС связь ON+
    R8_SH_CONNECT_OFF                  = 9120;         //ШС связь OFF+
    R8_STATE_SH_ENABLED                = 9121;         //Блок данных содержит доступные ШС+
    R8_STATE_SH_READY                  = 9122;         //Блок данных содержит готовности ШС+
    R8_STATE_SH_ALARM                  = 9123;         //Блок данных содержит биты тревожных ШС+
    R8_STATE_SH_BYPASS                 = 9124;         //Блок данных содержит биты ШС в байпассе+
    R8_STATE_SH_ARMED                  = 9125;         //Блок данных содержит биты ШС под охранной+
    R8_STATE_SH_CHECK                  = 9126;         //Блок данных содержит биты неисправности ШС+
    R8_STATE_SH_CONNECT                = 9127;         //Блок данных содержит биты на связи ШС+
    R8_COMMAND_ZONE_ARMED              = 9128;         //Зона поставить на охрану+
    R8_COMMAND_ZONE_DISARMED           = 9129;         //Зона снять с охраны+
    R8_ZONE_ARMED                      = 9130;         //Зона под охраной+
    R8_ZONE_DISARMED                   = 9131;         //Зона без охраны+
    R8_ZONE_READY                      = 9132;         //Зона готова+
    R8_ZONE_NOTREADY                   = 9133;         //Зона не готова+
    R8_ZONE_CHECK                      = 9134;         //Зона не исправен+
    R8_ZONE_ALARM                      = 9135;         //Зона в тревоге+
    R8_ZONE_ALARM_RESET                = 9136;         //Зона тревога сброшена+
    R8_ZONE_BYPASS_ON                  = 9137;         //Зона в BYPASSe+
    R8_ZONE_BYPASS_OFF                 = 9138;         //Зона вышла из BYPASSа+
    R8_STATE_ZONE_READY                = 9139;         //Блок данных содержит готовности зон+
    R8_STATE_ZONE_ALARM                = 9140;         //Блок данных содержит биты тревожных зон+
    R8_STATE_ZONE_CHECK                = 9141;         //Блок данных содержит биты неисправности зон+
    R8_STATE_ZONE_ARMED                = 9142;         //Блок данных содержит биты охраны зон+
    R8_STATE_ZONE_BYPASS               = 9143;         //Блок данных содержит биты байпасных зон+
    R8_CU_CONNECT_OFF                  = 9144;         //СУ потеря связи+
    R8_CU_CONNECT_ON                   = 9145;         //СУ восстановление связи+
    R8_STATE_CU_CONNECT                = 9146;         //Блок данных содержит байты состяний СУ (0,1-адрес, 2-состояние <0-off, 1-on>)
    R8_COMMAND_RELAY_OFF               = 9147;         //Реле выключить+
    R8_COMMAND_RELAY_ON                = 9148;         //Реле включить+
    R8_RELAY_OFF                       = 9149;         //Реле выключено+
    R8_RELAY_ON                        = 9150;         //Реле включено+
    R8_RELAY_CONNECT_ON                = 9151;         //Реле связь ON+
    R8_RELAY_CONNECT_OFF               = 9152;         //Реле связь OFF+
    R8_STATE_RELAY_ON                  = 9153;         //Блок данных содержит байты включенных реле
    R8_STATE_RELAY_CONNECT             = 9154;         //Блок данных содержит байты на связи реле
    R8_UPS_ACCESS                      = 9155;         //вскрытие корпуса ИБП-
    R8_UPS_OUT1_BAD                    = 9156;         //ИБП неисправность выхода 1+
    R8_UPS_OUT1_OK                     = 9157;         //ИБП восстановление выхода 1+
    R8_UPS_OUT2_BAD                    = 9158;         //ИБП неисправность выхода 2+
    R8_UPS_OUT2_OK                     = 9159;         //ИБП восстановление выхода 2+
    R8_UPS_IN220_BAD                   = 9160;         //ИБП неисправность входа 220+
    R8_UPS_IN220_OK                    = 9161;         //ИБП восстановление входа 220+
    R8_UPS_BAT_BAD                     = 9162;         //ИБП неисправность БА+
    R8_UPS_BAT_OK                      = 9163;         //ИБП восстановление БА+
    R8_UPS_RESERV_ON                   = 9164;         //ИБП переход на резерв+
    R8_UPS_RESERV_OFF                  = 9165;         //ИБП воостановление питания 220+
    R8_UPS_BAT_DISCONNECT              = 9166;         //ИБП отключение БА+
    R8_UPS_BAT_CONNECT                 = 9167;         //ИБП подключение БА+
    R8_USER_ENTER                      = 9168;         //Пользователь в сеансе+
    R8_USER_EXIT                       = 9169;         //Пользователь из сеанса+
    R8_POWER_UP                        = 9170;         //Питание включено+
    R8_POWER_DOWN                      = 9171;         //Питание выключено+
    R8_ENTER_CONF                      = 9172;         //Вход в конфигурирование БЦП+
    R8_UNKNOWN_USER                    = 9173;         //Ошибка авторизации оператора+
    R8_LOCK_KEYBOARD                   = 9174;         //Блокировка клавиауты БЦП при авторизации+
    R8_ALARM_OPEN                      = 9175;         //Вскрытие корпуса БЦП+
    R8_RESERV_POWER                    = 9176;         //Переход на резервное питание+
    R8_NORMAL_POWER                    = 9177;         //Восстановление сетевого питания+
    R8_RESET_CONF                      = 9178;         //Возврат к заводским установкам+
    R8_SYNC_TIME                       = 9179;         //Синхронизация часов БЦП+
    R8_TERM_ON                         = 9180;         //Терминал открыт+
    R8_TERM_OFF                        = 9181;         //Терминал закрыт+
    R8_TERM_CONNECT_ON                 = 9182;         //Терминал связь ON+
    R8_TERM_CONNECT_OFF                = 9183;         //Терминал связь OFF+
    R8_OBJECT_OFF                      = 9184;         //Объект отключен+
    R8_DRV_READY                       = 9185;         //Драйвер готов к работе
    R8_CU_ACCESS                       = 9186;         //вскрытие корпуса СУ+
    R8_SMALL_CONNECT_FALSE             = 9187;         //Кратковременная потеря связи с панелью+
    R8_SH_NORIGTH                      = 9188;         //Нет прав на управление ШС
    R8_RELAY_NORIGTH                   = 9189;         //Нет прав на управление реле
    R8_TERM_NORIGTH                    = 9190;         //Нет прав на управление терминалом

    R8_COMMAND_CU_CREATE               = 9200;         //СУ создать+
    R8_COMMAND_CU_CHANGE               = 9201;         //СУ редактировать+
    R8_COMMAND_CU_DELETE               = 9202;         //СУ удалить+
    R8_COMMAND_CU_CONFIG               = 9203;         //СУ запрос конфигурации+
    R8_CU_CREATE                       = 9204;         //СУ создано+
    R8_CU_CHANGE                       = 9205;         //СУ редактировано+
    R8_CU_DELETE                       = 9206;         //СУ удалено+
    R8_CU_CONFIG                       = 9207;         //СУ конфигурация+
    R8_COMMAND_ZONE_CREATE             = 9208;         //Зона создать+
    R8_COMMAND_ZONE_CHANGE             = 9209;         //Зона редактировать+
    R8_COMMAND_ZONE_DELETE             = 9210;         //Зона удалить+
    R8_COMMAND_ZONE_NAME_DELETE        = 9211;         //Зона по имени удалить+
    R8_COMMAND_ZONE_CONFIG             = 9212;         //Зона запрос конфигурации+
    R8_ZONE_CREATE                     = 9213;         //Зона создана+
    R8_ZONE_CHANGE                     = 9214;         //Зона редактирована+
    R8_ZONE_DELETE                     = 9215;         //Зона удалена+
    R8_ZONE_CONFIG                     = 9216;         //Зона конфигурация+
    R8_COMMAND_SH_CREATE               = 9217;         //ШС создать+
    R8_COMMAND_SH_CHANGE               = 9218;         //ШС редактировать+
    R8_COMMAND_SH_DELETE               = 9219;         //ШС удалить+
    R8_COMMAND_SH_SERNUM_DELETE        = 9220;         //ШС удалить по sernum+
    R8_COMMAND_SH_CONFIG               = 9221;         //ШС запрос конфигурации+
    R8_SH_CREATE                       = 9222;         //ШС создан+
    R8_SH_CHANGE                       = 9223;         //ШС редактирован+
    R8_SH_DELETE                       = 9224;         //ШС удален+
    R8_SH_CONFIG                       = 9225;         //ШС конфигурация+
    R8_COMMAND_USER_CREATE             = 9226;         //Пользователь создать+
    R8_COMMAND_USER_CHANGE             = 9227;         //Пользователь редактировать+
    R8_COMMAND_USER_DELETE             = 9228;         //Пользователь удалить+
    R8_USER_CREATE                     = 9229;         //Пользователь создан+
    R8_USER_CHANGE                     = 9230;         //Пользователь редактирован+
    R8_USER_DELETE                     = 9231;         //Пользователь удален+
    R8_COMMAND_TZ_CREATE               = 9232;         //ВЗ создать+
    R8_COMMAND_TZ_CHANGE               = 9233;         //ВЗ редактировать+
    R8_COMMAND_TZ_DELETE               = 9234;         //ВЗ удалить+
    R8_TZ_CREATE                       = 9235;         //ВЗ создана+
    R8_TZ_CHANGE                       = 9236;         //ВЗ редактирована+
    R8_TZ_DELETE                       = 9237;         //ВЗ удалена+
    R8_COMMAND_RELAY_CREATE            = 9238;         //Реле создать
    R8_COMMAND_RELAY_CHANGE            = 9239;         //Реле редактировать
    R8_COMMAND_RELAY_DELETE            = 9240;         //Реле удалить
    R8_COMMAND_RELAY_CONFIG            = 9254;         //Реле запрос конфигурации
    R8_RELAY_CREATE                    = 9241;         //Реле создано+
    R8_RELAY_CHANGE                    = 9242;         //Реле редактировано+
    R8_RELAY_DELETE                    = 9243;         //Реле удалено+
    R8_RELAY_CONFIG                    = 9255;         //Реле конфигурация+
    R8_COMMAND_SETTIME                 = 9244;         //Время установить+
    R8_SETTIME                         = 9245;         //Время установлено+
    R8_COMMAND_GETTIME                 = 9246;         //Время запросить+
    R8_GETTIME                         = 9247;         //Время выдано+
    R8_COMMAND_UD_CREATE               = 9248;         //УД создать+
    R8_COMMAND_UD_CHANGE               = 9249;         //УД редактировать+
    R8_COMMAND_UD_DELETE               = 9250;         //УД удалить+
    R8_UD_CREATE                       = 9251;         //УД создан+
    R8_UD_CHANGE                       = 9252;         //УД редактирован+
    R8_UD_DELETE                       = 9253;         //УД удален+
    R8_BAD_ARGUMENT                    = 9300;         //неверный агрумент
  }
end;

end.


{R08}

unit constants;


interface
// Тип считывателя
  const      PASS_READER                       =0;// проход
  const      ENTER_READER                      =1;// выдача
  const      EXIT_READER                       =2;// изъятие
  const      PIN_READER                        =3;// изъятие

// Состояние считывателя
  const      READER_CLOSE                      =0;
  const      READER_CARD                       =1;
  const      READER_CARD_OR_PIN                =2;
  const      READER_CARD_AND_PIN               =3;
  const      READER_OPEN                       =4;
  const      READER_FACILITY                   =5;
  const      READER_ACCESS_DENIED              =6;
  const      READER_ACCESS_GRANTED             =7;

//-------------------------------------------------------------------------------------------

 const MAN_ARMED_GROUP                 = 3010; // $0BC2
 const MAN_DISARMED_GROUP              = 3011; // $0BC3
 const MAN_BYPASS_ZONE                 = 3012; // $0BC4   обход зоны
 const MAN_RESET_BYPASS_ZONE           = 3013; // $0BС5   отмена обхода зоны

 const VIRT_ARMED_GROUP                = 3016; //
 const VIRT_DISARMED_GROUP             = 3017; //
 const VIRT_ALARM_GROUP                = 3018; //
 const VIRT_DISALARM_GROUP             = 3019; //

 const FIND_ELEMENT_IN_GROUP           = 3020; //

 //-------------------------------------------------------------------------------------------

 const PRN_LOG_50_FULL                 = 4000;
 const PRN_LOG_90_FULL                 = 4001;
 const PRN_SYSTEM_RESET                = 4002;
 const PRN_LOW_BATTERY                 = 4003;
 const PRN_ARMED                       = 4004;
 const PRN_ARMED_AUTO                  = 4005;
 const PRN_DISARMED                    = 4006;
 const PRN_PANIC                       = 4007;
 const PRN_PNC_RST                     = 4008;
 const PRN_BURGLARY                    = 4009;
 const PRN_BURG_RST                    = 4010;
 const PRN_FIRE_TRB                    = 4011;
 const PRN_FRTR_RST                    = 4012;
 const PRN_RECENT_ARM                  = 4013;
 const PRN_PRINTER_RSTR                = 4014;
 const PRN_PRINTER_FAIL                = 4015;
 const PRN_CANCEL                      = 4016;
 const PRN_AUXILARY                    = 4017;
 const PRN_AUX_RST                     = 4018;
 const PRN_TROUBLE                     = 4019;
 const PRN_TRBL_RST                    = 4020;
 const PRN_FIRE                        = 4021;
 const PRN_FIRE_RST                    = 4022;
 const PRN_BATTERY_FAIL                = 4023;
 const PRN_BYPASS                      = 4024;
 const PRN_BYP_RST                     = 4025;
 const PRN_EXP_SHRT                    = 4026;
 const PRN_EXP_RST                     = 4027;
 const PRN_LOG_OVERFLOW                = 4028;
 const PRN_RPM_SUPR                    = 4029;
 const PRN_RPM_RST                     = 4030;
 const PRN_ARMED_STAY                  = 4031;
 const PRN_TAMPER                      = 4032;
 const PRN_TMPR_RST                    = 4033;
 const PRN_AC_LOSS                     = 4034;
 const PRN_AC_RESTORE                  = 4035;
 const PRN_PROGRM_ENTRY                = 4036;
 const PRN_PROGRAM_EXIT                = 4037;
 const PRN_PROG_CHANGE                 = 4038;
 const PRN_LOW_BATT_RST                = 4039;
 const PRN_USRXX_ADD_BY                = 4040;
 const PRN_USRXX_DEL_BY                = 4041;
 const PRN_LOG_CLEARED                 = 4042;
 const PRN_ARMED_EARLY                 = 4043;
 const PRN_DISRMD_LATE                 = 4044;
 const PRN_ARMED_LATE                  = 4045;
 const PRN_SKED_CHANGE                 = 4046;
 const PRN_FAIL_TO_COMM                = 4047;
 const PRN_DURESS                      = 4048;

 //------------------------------------------------------------------------------

 const VIDEO_UNIPLEX_CAMERA_ONOFF      = 5022;
 const VIDEO_UNIPLEX_CAMERA_FAIL       = 5023;
 const VIDEO_SENDKEY_ERNITEC           = 5100;
 const VIDEO_SENDKEY_UNIPLEX           = 5101;
 const VIDEO_CAMERA_FAIL               = 5102;
 const VIDEO_CAMERA_TEST               = 5103;
 const VIDEO_CAMERA_ON                 = 5104;
 const VIDEO_MONITOR                   = 5001;
 const VIDEO_CAMERA                    = 5002;
 const VIDEO_POS                       = 5003;
 const VIDEO_NUM                       = 5004;
 const VIDEO_EMPTY                     = 5005;
 const VIDEO_CAMFIXED                  = 5006;
 const VIDEO_MONNF                     = 5007;
 const VIDEO_REMSYSNV                  = 5008;
 const VIDEO_CAMNV                     = 5009;
 const VIDEO_SEQNF                     = 5010;
 const VIDEO_KBDUM                     = 5011;
 const VIDEO_ADPRO                     = 5012;
 const VIDEO_NOTDEFINED                = 5013;
 const VIDEO_PRESSMON                  = 5014;
 const VIDEO_MONITOR_CAMERA            = 5015;
 const VIDEO_RUN_SCENARY               = 5016;
 const VIDEO_RUN_DVMD_PROGRAM          = 5017;
 const VIDEO_CAMERA_ON_SPOT            = 5018;
 const VIDEO_CAMERA_ON_MAIN            = 5019;

 const VIDEO_SPRITE_ONLINE             = 5020;
 const VIDEO_SPRITE_OFFLINE            = 5021;

//-----------------------------------------------------------------------------
 const SUD_AUX1_RIC                    = 223;
 const SUD_RESETAUX1_RIC               = 208;
 const SUD_SET_LINK_READER             = 194;
 const SUD_LOST_LINK_READER            = 195;

 const OUT_SET	                       = 253;
 const SUD_TIMEZONE_SETTED             = 252;
 const CONNECT_SET                     = 251;
 const TRYLINK                         = 249;
 const START                           = 248;
 const HANGLOW                         = 247;
 const HANGHIGH                        = 246;
 const NOTNETDEVICE                    = 245;
 const RESTORE_NETDEVICE               = 244;
 const LOST_NETDEVICE                  = 243;

 const ANTI_SET                        = 228;
 const NOTADDCARD_SET                  = 226;
 const SETCOMPUTER                     = 225;
 const LOSTCOMPUTER                    = 224;
 const SUD_GRANTED_BUTTON              = 237;
 const SUD_HELD                        = 222;
 const SUD_FORCED                      = 221;
 const SUD_RESETHELD                   = 220;
 const SUD_RESETFORCED                 = 219;

 const SUD_OK_ENTER                    = 1032; //Проход совершен
 const SUD_OK_NOT_ENTER                = 1033; //Проход не совершен
 const SUD_DOOR_CLOSE                  = {1}218;
 const SUD_DOOR_OPEN                   = {1}217;
 const SUD_LOCK_CLOSE                  = 1257;
 const SUD_LOCK_OPEN                   = 1242;

 const ANTI_COM                        = 209;
 const BRANCH_UNSIGNED                 = 193;
 const START_RS90                      = 192;
 const RIC_MODE                        = 191;
 const BEGIN_COMMAND                   = 139;
 const END_COMMAND                     = 140;

 const SUD_GRANTED_FACILITY            = 130; 
 const SUD_ACCESS_GRANTED              = 131;
 const SUD_BAD_FACILITY                = 132;
 const SUD_BAD_CARD_FORMAT             = 133;
 const SUD_NO_CARD                     = 134;
 const SUD_CALC_TIMEZONE               = 135;
 const SUD_BAD_PIN                     = 136;
 const SUD_BAD_LEVEL                   = 138;
 const SUD_BAD_APB                     = 148;
 const SUD_CHECK_RIGHT                 = 238;
 const SUD_SET_READER_MODE             = 6000;
 const SUD_GET_MODE_READER             = 6001;
 const SUD_ADD_CARD                    = 6002;
 const SUD_DEL_CARD                    = 6003;
 const SUD_SET_DATETIME                = 6004;
 const SUD_SETTED_DATETIME             = 232;//6005;
 const SUD_ADDED_CARD                  = 230;//6006;
 const SUD_DELETED_CARD                = 229;//6007;
 const SUD_SET_HOLIDAY                 = 6008;
 const SUD_SETTED_HOLIDAY              = 231;
 const SUD_SET_MASK                    = 6009;
 const SUD_SETTED_MASK                 = 254;//6010;
 const SUD_SET_READER_FULL             = 6011;
 const SUD_GET_READER_DATABASE         = 6012;
 const SUD_SET_LEVEL                   = 6013;
 const SUD_SET_LEVELS                  = 6014;
 const SUD_LOAD_LOGIC_LEVEL            = 6015;
 const SUD_SET_TIMEZONE                = 6016;
 const SUD_SET_TIMEZONES               = 6017;
 const SUD_CHANGE_BRANCH               = 6018;
 const SUD_SETTED_LEVEL                = 255;
 const COMMAND_OPEN_DOOR               = 235;
 const SUD_TEST                        = 170;
 const AAN100_SET_TIMEZONE             = 6019;
 const AAN100_SET_LEVEL                = 6020;
 const AAN100_SET_MASK                 = 6021;
 const AAN100_SET_DATE                 = 6022;
 const AAN100_W_READER                 = 6023;
 const AAN100_W_FORMAT                 = 6024;
 const SUD_ACCESS_DENIED               = 6025;
 const SUD_ACCESS_CHOOSE               = 6026;
 const SUD_UNKNOW_MESSAGE              = 6027;
 const SUD_TAMPER_RIC                  = 6028;
 const SUD_RESETTAMPER_RIC             = 6029;
 const AAN100_SET_HOLIDAY              = 6030;
 const AAN100_WW_FORMAT                = 6031;
 const DRIVERRIC_REQUEST               = 6032;
 const DRIVERRIC_GRANTED               = 6033;
 const DRIVERRIC_DENIED                = 6034;
 const DRIVERRIC_ERROR                 = 6035;


 const SUD_LINK_STATE                  = 6038;
 const SUD_TAMPER_STATE                = 6039;
 const SUD_FORCE_STATE                 = 6040;
 const SUD_HELD_STATE                  = 6041;
 const SUD_AUX_STATE                   = 6042;
 const SUD_READ_STATE                  = 6043;
 const SUD_MODE_STATE                  = 6044;
 const SUD_DOWNLOAD_CARDS              = 6045;
 const SUD_RESET_APB_CARD              = 6046;
 const SUD_DOWNLOADED_CARDS            = 6047;

 const SUD_FIND_METAL                  = 6048;
 const SUD_ONE_MAN                     = 6049; 

 const PCE_OUTPUT_ENABLED              = 242;
 const PCE_OUTPUT_DISABLED             = 257;

//------------------------------------------------------------------------------

  const         SWITCH_PLAN                       =99;

  const         LOST_LINK_TAGET                   =7000;
  const         SET_LINK_TAGET                    =7001;


  const         KEYBOARD_DRAW                     =7011;
  const         REQUEST_KEYBOARD_ARMED            =7012;
  const         REQUEST_KEYBOARD_DISARMED         =7013;
  const         REQUEST_KEYBOARD_STATUS           =7015;

  const         START_PROGRAM                     = 7014;
  const         STOP_PROGRAM                      = 7017;//программа останвлена
  const         NET_TEST                          = 7034;//
  const         KILL_PROGRAM                      = 7022;//остановить программу
  const         CHECK_LIVE_PROGRAM                = 7025;//
  const         LOST_LIVE_PROGRAM                 = 7026;//
  const         I_LIVE_PROGRAM                    = 7027;//
  const         SET_TIME                          = 7028;//
  const         EXIT_PROGRAM                      = 7029;//оставить программу
  
  const         CONTROLSTATE_ERROR_ARMED          = 7023;//
  const         CONTROLSTATE_OK_ARMED             = 7024;//
  const         CONTROLSTATE_ERROR_DISARMED       = 7032;//
  const         CONTROLSTATE_OK_DISARMED          = 7033;//

  const         KEYVISTA_PART_READY               = 4100; // раздел готов
  const         KEYVISTA_PART_NOTREADY            = 4101; // раздел не готов
  const         KEYVISTA_PART_ARMED               = 4102; // раздел под охраной
  const         KEYVISTA_PART_DISARMED            = 4103; // раздел без охраны

  const         STATE_PART_ARMED                  = 4104; // блок данных содержит биты охраны разделов
  const         STATE_PART_READY                  = 4105; // блок данных содержит готовности разделов
  const         STATE_ZONE_ENABLED                = 4106; // зарезервировано
  const         STATE_ZONE_READY                  = 4107; // блок данных содержит готовности зон

  const         COMMAND_PART_ARMED                = 4108; // поставить на охрану
  const         COMMAND_PART_DISARMED             = 4109; // снять с охраны
  const         COMMAND_ZONE_BYPASS               = 4110; // обход зоны

  const         KEYVISTA_ZONE_ALARM               = 4111; // зона в тревоге
  const         KEYVISTA_ZONE_CHECK               = 4112; // зона не исправна
  const         KEYVISTA_ZONE_FAULT               = 4113; // зона не готова
  const         KEYVISTA_ZONE_BYPASS              = 4114; // зона в BYPASSe

  const         KEYVISTA_LOBAT                    = 4115; // низкое напряжение на батарее
  const         KEYVISTA_OKBAT                    = 4116; // батарея в норме
  const         PANEL_REFRESH                     = 4117; // запрос на чтение состояний зон и разделов ( драйвер отвечает STATE_... )
  const         COMMAND_VISTA_CONFIG              = 4118; // конфигурация зон (данные по зонам в разделе и тип реакции)
  const         STATE_ZONE_ALARM                  = 4119; // блок данных содержит тревоги зон
  const         KEYVISTA_ZONE_ALARM_RESET         = 4120; // тревога в зоне сброшена
  const         KEYVISTA_ZONE_READY               = 4121; // зона готова
  const         KEYVISTA_PART_BYPASS              = 4122; // раздел в BYPASS
  const         STATE_PART_BYPASS                 = 4123; // блок данных содержит биты BYPASS разделов
  const         KEYVISTA_ZONE_BYPASS_RESET        = 4124; // зона в BYPASSe сброс
  const         STATE_ZONE_BYPASS                 = 4125; // блок данных содержит BYPASS зон

  const         COMMAND_DISARMED_ZONE             = 4126; // снять зону с охраны
  const         COMMAND_ARMED_ZONE                = 4127; // поставить зону на охрану
  const         KEYVISTA_ZONE_CHECK_RESET         = 4128; //
  const         KEYVISTA_ZONE_ARMED               = 4129; // зона под охраной
  const         KEYVISTA_ZONE_DISARMED            = 4130; // зона без охраны

  const         KEYBOARD_FAILED                   = 4131; //
  const         KEYBOARD_RESTORE                  = 4132; //
  const         VIRT_ALARM_ZONE                   = 4133; // отображена системой мониторинга
  const         VISTA_ENABLED_ZONE                = 4134; // запрос состояния запрограммированых зон

  const         PRN_SILENT_PANIC                  = 4135; // генерится по PRN_PANIC после анализа типа зоны
  const         PRN_AUDIBLE_PANIC                 = 4136; // генерится по PRN_PANIC после анализа типа зоны

  const         KEYVISTA_PART_BYPASS_RESET        = 4137; // раздел вышел из  BYPASS
  const         VIRT_ARMED_ZONE                   = 4138; // отображена системой мониторинга
  const         VIRT_DISARMED_ZONE                = 4139; // отображена системой мониторинга

  const         STATE_ZONE_ARMED                  = 4140; // блок данных содержит биты охраны зон
  const         STATE_PART_ALARM                  = 4141; // блок данных содержит биты тревоги разделов

  const         KEYVISTA_PART_ALARM               = 4142; // тревога в разделе
  const         KEYVISTA_PART_ALARM_RESET         = 4143; // отбой тревога в разделе
  const         KEYVISTA_PART_FAULT               = 4144; // нарушение в разделе
  const         KEYVISTA_PART_FAULT_RESET         = 4145; // отбой нарушения в разделе
  const         KEYVISTA_PART_CHECK               = 4146; // неисправность в разделе
  const         KEYVISTA_PART_CHECK_RESET         = 4147; // отбой неисправности в разделе
  const         KEYVISTA_ZONE_FAULT_RESET         = 4148; // тревога в зоне сброшена

  const         STATE_PART_CHECK                  = 4149; // блок данных содержит биты неисправности разделов
  const         STATE_PART_FAULT                  = 4150; // блок данных содержит биты нарушений разделов

  const         STATE_ZONE_CHECK                  = 4151; // блок данных содержит биты неисправности зон
  const         STATE_ZONE_FAULT                  = 4152; // блок данных содержит биты нарушений зон
  const         STATE_VISTA                       = 4153;
  const         KEY_PRINTER_RSTR                  = 4154;
  const         KEY_PRINTER_FAIL                  = 4155;
  const         KEY_ERROR_PROG                    = 4156;

  const         KEYVISTA_AC_LOSS                  = 4157; // низкое напряжение на батарее
  const         KEYVISTA_AC_OK                    = 4158; // батарея в норме
  const         KEYVISTA_ZONE_ATTENTION           = 4159;
  const         COMMAND_ZONE_RESET_ALARM          = 4160;
  const         COMMAND_READ_PART                 = 4161;
  const         COMMAND_READ_ZONE                 = 4162;

  const         VST_ARMED                         = 4204;
  const         VST_DISARMED                      = 4206;
  const         PANEL_RESTART                     = 4207;
  const         VISTA_STATE                       = 4208;

  const         MEGA_ZONE_READY                   = 1001;
  const         MEGA_ZONE_NOT_READY               = 1002;
  const         MEGA_ZONE_ARMED                   = 1003;
  const         MEGA_ZONE_DISARMED                = 1004;
  const         MEGA_ZONE_ALARM                   = 1005;
  const         MEGA_ZONE_ALARM_RESET             = 1006;
  const         MEGA_ZONE_BYPASS                  = 1007;
  const         MEGA_ZONE_BYPASS_RESET            = 1008;

  
  //------------------------------------------------------
  //                       Рубеж-08
  //------------------------------------------------------
  const         R8_CONNECT_FALSE                  = 9100;         //Отсутствие связи с БЦП+
  const         R8_CONNECT_TRUE                   = 9101;         //БЦП на связи +
  const         R8_SYSERROR                       = 9102;         //Системная ошибка БЦП+
  const         R8_OK                             = 9103;         //БЦП в норме (Сброс систем. ошибок)+
  const         R8_COMMAND_PANEL_REFRESH          = 9104;         //Запрос состояний БЦП,зон, ШС, СУ
  const         R8_COMMAND_SH_ARM                 = 9105;         //ШС Поставить на охрану+
  const         R8_COMMAND_SH_DISARM              = 9106;         //ШС Снять с охраны+
  const         R8_COMMAND_SH_OFF                 = 9107;         //ШС отключить+
  const         R8_COMMAND_SH_ON                  = 9108;         //ШС подключить+
  const         R8_COMMAND_SH_RESTORE             = 9109;         //ШС восстановить+
  const         R8_SH_ARMED                       = 9110;         //ШС под охраной+
  const         R8_SH_DISARMED                    = 9111;         //ШС без охраны+
  const         R8_SH_READY                       = 9112;         //ШС готов+
  const         R8_SH_NOTREADY                    = 9113;         //ШС не готов+
  const         R8_SH_CHECK                       = 9114;         //ШС неисправен+
  const         R8_SH_ALARM                       = 9115;         //ШС в тревоге+
  const         R8_SH_RESTORE                     = 9116;         //ШС восстановлен (исключен из тревож. сообщ.)
  const         R8_SH_OFF                         = 9117;         //ШС отключен+
  const         R8_SH_ON                          = 9118;         //ШС подключен+
  const         R8_SH_HW_OK                       = 9119;         //ШС Оборудование в норме
  const         R8_SH_HW_FAULT                    = 9120;         //ШС Оборудование неисправно
  const         R8_BLOCK_SH_ENABLED               = 9121;         //Блок доступных ШС+
  const         R8_BLOCK_SH_READY                 = 9122;         //Блок готовых ШС+
  const         R8_BLOCK_SH_ALARM                 = 9123;         //Блок ШС в тревоге+
  const         R8_BLOCK_SH_OFF                   = 9124;         //Блок отключенных ШС+
  const         R8_BLOCK_SH_ARMED                 = 9125;         //Блок ШС под охранной+
  const         R8_BLOCK_SH_CHECK                 = 9126;         //Блок неисправных ШС+
  const         R8_BLOCK_SH_HW_FAULT              = 9127;         //Блок ШС на связи+
  const         R8_COMMAND_ZONE_ARM               = 9128;         //Зона поставить на охрану+
  const         R8_COMMAND_ZONE_DISARM            = 9129;         //Зона снять с охраны+
  const         R8_ZONE_ARMED                     = 9130;         //Зона под охраной+
  const         R8_ZONE_DISARMED                  = 9131;         //Зона без охраны+
  const         R8_ZONE_READY                     = 9132;         //Зона готова+
  const         R8_ZONE_NOTREADY                  = 9133;         //Зона не готова+
  const         R8_ZONE_CHECK                     = 9134;         //Зона не исправена+
  const         R8_ZONE_ALARM                     = 9135;         //Зона в тревоге+
  const         R8_ZONE_RESTORE                   = 9136;         //Зона восстановлена+
  const         R8_ZONE_SH_OFF                    = 9137;         //В зоне есть отключенные ШС
  const         R8_ZONE_SH_ON                     = 9138;         //В зоне все ШС подключены
  const         R8_BLOCK_ZONE_READY               = 9139;         //Блок готовых зон+
  const         R8_BLOCK_ZONE_ALARM               = 9140;         //Блок зон в тревоге+
  const         R8_BLOCK_ZONE_CHECK               = 9141;         //Блок неисправных зон+
  const         R8_BLOCK_ZONE_ARMED               = 9142;         //Блок зон под охранной+
  const         R8_BLOCK_ZONE_OFF                 = 9143;         //Блок отключенных зон+
  const         R8_CU_CONNECT_OFF                 = 9144;         //СУ потеря связи+
  const         R8_CU_CONNECT_ON                  = 9145;         //СУ восстановление связи+
  const         R8_BLOCK_CU_CONNECT               = 9146;         //Блок СУ на линии     (!)
  const         R8_COMMAND_RELAY_0                = 9147;         //Реле выключить+
  const         R8_COMMAND_RELAY_1                = 9148;         //Реле включить+
  const         R8_RELAY_0                        = 9149;         //Реле выключено+
  const         R8_RELAY_1                        = 9150;         //Реле включено+
  const         R8_RELAY_HW_OK                    = 9151;         //Реле Оборудование в норме
  const         R8_RELAY_HW_FAULT                 = 9152;         //Реле Оборудование неисправно
  const         R8_BLOCK_RELAY_1                  = 9153;         //Блок включенных реле
  const         R8_BLOCK_RELAY_CONNECT            = 9154;         //Блок реле на связи
  const         R8_UPS_ACCESS                     = 9155;         //вскрытие корпуса ИБП-
  const         R8_UPS_OUT1_BAD                   = 9156;         //ИБП неисправность выхода 1+
  const         R8_UPS_OUT1_OK                    = 9157;         //ИБП восстановление выхода 1+
  const         R8_UPS_OUT2_BAD                   = 9158;         //ИБП неисправность выхода 2+
  const         R8_UPS_OUT2_OK                    = 9159;         //ИБП восстановление выхода 2+
  const         R8_UPS_IN220_BAD                  = 9160;         //ИБП неисправность входа 220+
  const         R8_UPS_IN220_OK                   = 9161;         //ИБП восстановление входа 220+
  const         R8_UPS_BAT_BAD                    = 9162;         //Разряд БА ИБП+ {ИБП неисправность БА+}
  const         R8_UPS_BAT_OK                     = 9163;         //Заряд в норме БА ИБП БА+ {ИБП восстановление БА+}
  const         R8_UPS_RESERV_ON                  = 9164;         //ИБП переход на резерв+
  const         R8_UPS_RESERV_OFF                 = 9165;         //ИБП воостановление питания 220+
  const         R8_UPS_BAT_DISCONNECT             = 9166;         //ИБП отключение БА+
  const         R8_UPS_BAT_CONNECT                = 9167;         //ИБП подключение БА+
  const         R8_USER_ENTER                     = 9168;         //Начало рабочей сессии БЦП+
  const         R8_USER_EXIT                      = 9169;         //Конец рабочей сессии БЦП+
  const         R8_POWER_UP                       = 9170;         //Включение БЦП+
  const         R8_POWER_DOWN                     = 9171;         //Выключение БЦП+
  const         R8_ENTER_CONF                     = 9172;         //Вход в конфигурирование БЦП+
  const         R8_UNKNOWN_USER                   = 9173;         //Ошибка авторизации оператора+
  const         R8_LOCK_KEYBOARD                  = 9174;         //Блокировка клавиатуры БЦП при авторизации+
  const         R8_OPEN                           = 9175;         //Вскрытие корпуса БЦП+
  const         R8_RESERV_POWER                   = 9176;         //Переход на резервное питание+
  const         R8_NORMAL_POWER                   = 9177;         //Восстановление сетевого питания+
  const         R8_WORKSETTINGS                   = 9178;         //Возврат к заводским установкам+
  const         R8_SYNC_TIME                      = 9179;         //Синхронизация часов БЦП+
  const         R8_TERM_ON                        = 9180;         //Терминал подключен, в норме+
  const         R8_TERM_OFF                       = 9181;         //Терминал отключен+
  const         R8_TERM_HW_OK                     = 9182;         //Терминал Оборудование в норме
  const         R8_TERM_HW_FAULT                  = 9183;         //Терминал Оборудование неисправно
  const         R8_BCP_OPEN                       = 9184;         //Вскрытие БЦП          (!)
  const         R8_DRV_READY                      = 9185;         //Драйвер готов к работе
  const         R8_CU_OPEN                        = 9186;         //Вскрытие СУ+  (!)
  const         R8_SMALL_CONNECT_FALSE            = 9187;         //Кратковременное (менее минуты) отсутствие связи с БЦП+
  const         R8_SH_NORIGTH                     = 9188;         //Нет прав на управление ШС
  const         R8_RELAY_NORIGTH                  = 9189;         //Нет прав на управление реле
  const         R8_TERM_NORIGTH                   = 9190;         //Нет прав на управление терминалом
  const         R8_CU_CLOSE                       = 9191;         //СУ корпус закрыт
  const         R8_BLOCK_CU_OPEN                  = 9192;         //Блок вскрытых СУ (!)
  const         R8_RETURN_COMMAND_FROM_ROSTEK     = 9193;         //Возвращение команды с ВУ               (!)
  const         R8_SH_RESET                       = 9194;         //ШС. Сброс                              (!)
  const         R8_SH_BYPASS                      = 9195;         //ШС. пропуск не готового к постановке      (!)
  const         R8_SH_INDELAY                     = 9196;         //ШС задержка на вход   (!)
  const         R8_SH_OUTDELAY                    = 9197;         //ШС задержка на выход  (!)
  const         R8_BAT_LOW                        = 9198;         //Разряд БА             (!)
  const         R8_BAT_NORMAL                     = 9199;         //Восстановление БА     (!)
  const         R8_COMMAND_CU_CREATE              = 9200;         //СУ создать+
  const         R8_COMMAND_CU_CHANGE              = 9201;         //СУ редактировать+
  const         R8_COMMAND_CU_DELETE              = 9202;         //СУ удалить+
  const         R8_COMMAND_CU_CONFIG              = 9203;         //СУ запрос конфигурации+
  const         R8_CU_CREATE                      = 9204;         //СУ создано+
  const         R8_CU_CHANGE                      = 9205;         //СУ редактировано+
  const         R8_CU_DELETE                      = 9206;         //СУ удалено+
  const         R8_CU_CONFIG                      = 9207;         //СУ конфигурация+
  const         R8_COMMAND_ZONE_CREATE            = 9208;         //Зону создать+
  const         R8_COMMAND_ZONE_CHANGE            = 9209;         //Зону редактировать+
  const         R8_COMMAND_ZONE_DELETE            = 9210;         //Зону удалить+
  const         R8_COMMAND_ZONE_NAME_DELETE       = 9211;         //Зону по имени удалить+
  const         R8_COMMAND_ZONE_CONFIG            = 9212;         //Зона запрос конфигурации+
  const         R8_ZONE_CREATE                    = 9213;         //Зона создана+
  const         R8_ZONE_CHANGE                    = 9214;         //Зона редактирована+
  const         R8_ZONE_DELETE                    = 9215;         //Зона удалена+
  const         R8_ZONE_CONFIG                    = 9216;         //Зона конфигурация+
  const         R8_COMMAND_SH_CREATE              = 9217;         //ШС создать+
  const         R8_COMMAND_SH_CHANGE              = 9218;         //ШС редактировать+
  const         R8_COMMAND_SH_DELETE              = 9219;         //ШС удалить+
  const         R8_COMMAND_SH_SERNUM_DELETE       = 9220;         //ШС удалить по sernum+
  const         R8_COMMAND_SH_CONFIG              = 9221;         //ШС запрос конфигурации+
  const         R8_SH_CREATE                      = 9222;         //ШС создан+
  const         R8_SH_CHANGE                      = 9223;         //ШС редактирован+
  const         R8_SH_DELETE                      = 9224;         //ШС удален+
  const         R8_SH_CONFIG                      = 9225;         //ШС конфигурация+
  const         R8_COMMAND_USER_CREATE            = 9226;         //Пользователь создать+
  const         R8_COMMAND_USER_CHANGE            = 9227;         //Пользователь редактировать+
  const         R8_COMMAND_USER_DELETE            = 9228;         //Пользователь удалить+
  const         R8_USER_CREATE                    = 9229;         //Пользователь создан+
  const         R8_USER_CHANGE                    = 9230;         //Пользователь редактирован+
  const         R8_USER_DELETE                    = 9231;         //Пользователь удален+
  const         R8_COMMAND_TZ_CREATE              = 9232;         //ВЗ создать+
  const         R8_COMMAND_TZ_CHANGE              = 9233;         //ВЗ редактировать+
  const         R8_COMMAND_TZ_DELETE              = 9234;         //ВЗ удалить+
  const         R8_TZ_CREATE                      = 9235;         //ВЗ создана+
  const         R8_TZ_CHANGE                      = 9236;         //ВЗ редактирована+
  const         R8_TZ_DELETE                      = 9237;         //ВЗ удалена+
  const         R8_COMMAND_RELAY_CREATE           = 9238;         //Реле создать
  const         R8_COMMAND_RELAY_CHANGE           = 9239;         //Реле редактировать
  const         R8_COMMAND_RELAY_DELETE           = 9240;         //Реле удалить
  const         R8_RELAY_CREATE                   = 9241;         //Реле создано+
  const         R8_RELAY_CHANGE                   = 9242;         //Реле редактировано+
  const         R8_RELAY_DELETE                   = 9243;         //Реле удалено+
  const         R8_COMMAND_SETTIME                = 9244;         //Время установить+
  const         R8_SETTIME                        = 9245;         //Время установлено+
  const         R8_COMMAND_GETTIME                = 9246;         //Время запросить+
  const         R8_GETTIME                        = 9247;         //Время выдано+
  const         R8_COMMAND_UD_CREATE              = 9248;         //УД создать+
  const         R8_COMMAND_UD_CHANGE              = 9249;         //УД редактировать+
  const         R8_COMMAND_UD_DELETE              = 9250;         //УД удалить+
  const         R8_UD_CREATE                      = 9251;         //УД создан+
  const         R8_UD_CHANGE                      = 9252;         //УД редактирован+
  const         R8_UD_DELETE                      = 9253;         //УД удален+
  const         R8_COMMAND_TERM_CREATE            = 9254;         //ТЕРМ создать
  const         R8_COMMAND_TERM_CHANGE            = 9255;         //ТЕРМ редактировать
  const         R8_COMMAND_TERM_DELETE            = 9256;         //ТЕРМ удалить
  const         R8_COMMAND_TERM_SERNUM_DELETE     = 9257;         //ТЕРМ удалить по sernum
  const         R8_COMMAND_TERM_CONFIG            = 9258;         //ТЕРМ запрос конфигурации
  const         R8_TERM_CREATE                    = 9259;         //ТЕРМ создан
  const         R8_TERM_CHANGE                    = 9260;         //ТЕРМ редактирован
  const         R8_TERM_DELETE                    = 9261;         //ТЕРМ удален
  const         R8_TERM_CONFIG                    = 9262;         //ТЕРМ конфигурация
  const         R8_COMMAND_CU_ALL_DELETE          = 9263;         //Удалить все СУ
  const         R8_CU_ALL_DELETE                  = 9264;         //Удалены все СУ
  const         R8_COMMAND_ZONE_ALL_DELETE        = 9265;         //Удалить все зоны
  const         R8_ZONE_ALL_DELETE                = 9266;         //Удалены все зоны
  const         R8_COMMAND_TZ_ALL_DELETE          = 9267;         //Удалить все ВЗ
  const         R8_TZ_ALL_DELETE                  = 9268;         //Удалены все ВЗ
  const         R8_COMMAND_UD_ALL_DELETE          = 9269;         //Удалить все УД
  const         R8_UD_ALL_DELETE                  = 9270;         //Удалены все УД
  const         R8_COMMAND_USER_ALL_DELETE        = 9271;         //Удалить всех пользователей
  const         R8_USER_ALL_DELETE                = 9272;         //Удалены все пользователи
  const         R8_COMMAND_RELAY_RESTORE          = 9273;         //Реле восстановить
  const         R8_COMMAND_AP_RESTORE             = 9274;         //ТД восстановить
  const         R8_SH_TEST                        = 9275;         //ШС. Режим проверки
  const         R8_SH_TESTPASSEDOK                = 9276;         //ШС. Проверка пройдена
  const         R8_SH_TESTTIMEOUT                 = 9277;         //ШС. Проверка не пройдена
  const         R8_SH_WAITFORREADY                = 9278;         //ШС. Ожидание готовности
  const         R8_SH_WAITFORREADYCANCEL          = 9279;         //ШС. Отмена ожидания готовности
  const         R8_COMMAND_GR_CREATE              = 9280;         //Группу создать
  const         R8_GR_CREATE                      = 9281;         //Группа создана
  const         R8_COMMAND_GR_CHANGE              = 9282;         //Группу редактировать
  const         R8_GR_CHANGE                      = 9283;         //Группа редактирована
  const         R8_COMMAND_GR_DELETE              = 9284;         //Группу удалить
  const         R8_GR_DELETE                      = 9285;         //Группа удалена
  const         R8_COMMAND_GR_DELETE_ALL          = 9286;         //Удалить все группы
  const         R8_GR_DELETEALL                   = 9287;         //Группы удалены
  const         R8_COMMAND_GR_GET                 = 9288;         //Группа. Запрос конфигурации
  const         R8_GR_GET                         = 9289;         //Группа конфигурация
  const         R8_COMMAND_GR_GETLIST             = 9290;         //Группа. Запрос конфигурации всех
  const         R8_COMMAND_USER_APBRESET          = 9291;         //Польз. Сбросить APB
  const         R8_USER_APBRESET                  = 9292;         //Польз. APB сброшен
  const         R8_USER_BLOCKING                  = 9293;         //Польз. заблокирован
  const         R8_USER_DEBLOCKING                = 9294;         //Польз. разблокирован
  const         R8_RELAY_OFF                      = 9295;         //Реле отключено+
  const         R8_RELAY_ON                       = 9296;         //Реле подключено+
  const         R8_COMMAND_SH_BYPASS              = 9297;         //ШС Пропустить
  const         R8_COMMAND_SH_RESET               = 9298;         //ШС Сбросить
  const         R8_COMMAND_SH_TEST                = 9299;         //ШС Проверка

  const         R8_BAD_ARG_IN_USER_CMD            = 9300;         //Неверный аргумент в команде User+/-/e для ServerRubeg  (!)
  const         R8_BCP_ERROR                      = 9301;         //Отчет Р08 об ошибке на команду                         (!)
  const         R8_RETURN_ROSTEK_CMD_ON_ERROR     = 9302;         //Возвращение команды с ВУ                               (!)
  const         R8_BAD_ARG_IN_ROSTEK_CMD          = 9303;         //Неверный аргумент в команде от ВУ                      (!)

  const         R8_SELFTEST                       = 9307;         //Самотестирование БЦП. Технологическая проверка на заводе
  const         R8_RESET                          = 9308;         //Сброс БЦП
  const         R8_HANDSHAKE                      = 9310;         //Нажали ПРИНЯТЬ
  const         R8_SH_FIRE_ALARM                  = 9311;         // (!) ПОЖАР
  const         R8_SH_FIRE_ATTENTION              = 9312;         // (!) Внимание

  const         R8_SH_NOTREADY_IN_CHECK           = 9319;         // (!) ШС не готов при неиспр.+
  const         R8_SH_READY_IN_CHECK              = 9320;         // (!) ШС готов при неиспр.+
  const         R8_SH_NOTREADY_IN_ALARM           = 9321;         // (!) ШС не готов при тревоге+
  const         R8_SH_READY_IN_ALARM              = 9322;         // (!) ШС готов при тревоге+
  
  const         R8_TC_RESTORE                     = 9323;         // ТС восстановлен
  const         R8_TC_HW_FAULT                    = 9324;         // ТС Оборудование неисправно
  const         R8_TC_HW_OK                       = 9325;         // ТС Оборудование в норме
  const         R8_TC_NORIGTH                     = 9326;         // ТС Нет прав управления
  const         R8_TC_CREATE                      = 9327;         // ТС Создано
  const         R8_TC_CHANGE                      = 9328;         // ТС Редактировано
  const         R8_TC_DELETE                      = 9329;         // ТС Удалено

  const         R8_COMMAND_CLEAR                  = 9331;         // БЦП Очистить конфигурацию
  const         R8_COMMAND_CLEARSYSERROR          = 9332;         // БЦП Сбросить системную ошибку
  const         R8_COMMAND_STARTCHECKCONFIG       = 9333;         // БЦП Проверить конфигурацию
  const         R8_COMMAND_BCP_RESET              = 9334;         // БЦП Сбросить
  const         R8_COMMAND_BCP_CONSOLELOCK        = 9335;         // Выход из сеанса в БЦП
  const         R8_COMMAND_BCP_CONSOLEUNLOCK      = 9336;         // Сеанс админисратора в БЦП
  const         R8_COMMAND_BCP_DMQCLEARNND        = 9337;         // Восстановление всех готовых СУ
  const         R8_COMMAND_BCP_DMQCLEARTCO        = 9338;         // Восстановление всех готовых ШС
  const         R8_COMMAND_BCP_VAR_ASSIGN         = 9339;         // Присвоить перменной значение
  const         R8_COMMAND_BCP_ALLUSERSETSTATE    = 9340;         // Сбросить APB всех пользователей
  const         R8_BCP_ALLUSERSETSTATE            = 9341;         // Сброс APB всех пользователей

  const         R8_COMMAND_RN_DELETE_ALL          = 9342;         // Удалить все названия
  const         R8_COMMAND_RP_DELETE_ALL          = 9343;         // Удалить все программы
  const         R8_COMMAND_HD_DELETE_ALL          = 9344;         // Удалить все праздники

  const         R8_RN_ALL_DELETE                  = 9345;         // Удалены все названия
  const         R8_RP_ALL_DELETE                  = 9346;         // Удалить все программы
  const         R8_HD_ALL_DELETE                  = 9347;         // Удалить все праздники

  const         R8_PCCONNECT_OFF                  = 9351;         //Потеря связи с ПЭВМ
  const         R8_PCCONNECT_ON                   = 9352;         //Восстановление связи с ПЭВМ

  const         R8_RELAY_CHECK                    = 9401;         // (!) Реле неисправно
  const         R8_RELAY_RESTORE                  = 9402;         // (!) Реле восстановлено
  const         R8_RELAY_WAITON                   = 9403;         //Реле Задержка включения
  const         R8_COMMAND_RELAY_CONFIG           = 9404;         //Реле запрос конфигурации
  const         R8_RELAY_CONFIG                   = 9405;         //Реле конфигурация+
  const         R8_COMMAND_RELAY_OFF              = 9406;         //Реле отключить
  const         R8_COMMAND_RELAY_ON               = 9407;         //Реле подключить

  const         R8_TERM_REQUEST                   = 9411;         // (!) Запрос пользователя
  const         R8_TERM_BLOCKING                  = 9412;         // (!) Блокирование работы терминала
  const         R8_TERM_AUTHORIZATIONERROR        = 9413;         // (!) Ошибка авторизации пользователя
  const         R8_TERM_CODEFORGERY               = 9414;         // (!) Попытка подбора кода. Событие выдается после трех, сделанных подряд, ошибок авторизации пользователя.обл.
  const         R8_TERM_RESET                     = 9415;         // (!) Восстановление работы терминала после блокирования
  const         R8_TERM_USERCOMMAND               = 9416;         // (!) Пользовательская команда
  const         R8_TERM_CHECK                     = 9417;         // (!) Терминал неисправен
  const         R8_TERM_RESTORE                   = 9418;         // (!) Терминал восстановлен
  const         R8_COMMAND_TERM_RESTORE           = 9419;         // Терминал восстановить
  
  const         R8_TECHNO_AREA0 	              = 9421;         // (!) обл.0. Переход физического ШС в состояние в обл 0. Замкнуто для дискретных ШС
  const         R8_TECHNO_AREA1 	              = 9422; 	  // (!) обл 1. Переход физического ШС в состояние в обл 1. Разомкнуто для дискретных ШС
  const         R8_TECHNO_AREA2 	              = 9423; 	  // (!) обл 2. Переход физического ШС в состояние в обл 2
  const         R8_TECHNO_AREA3 	              = 9424; 	  // (!) обл 3. Переход физического ШС в состояние в обл 3
  const         R8_TECHNO_ALARM 	              = 9425; 	  // (!) Тревога тех. ШС
  const         R8_COMMAND_TERM_BLOCK             = 9426;         // Терминал заблокировать
  const         R8_COMMAND_TERM_RESET             = 9427;         // Терминал сбросить
  const         R8_COMMAND_TERM_OFF               = 9428;         // Терминал отключить
  const         R8_COMMAND_TERM_ON                = 9429;         // Терминал подключить

  const         R8_COMMAND_HOLIDAY_EDIT           = 9431;         // Редактировать праздники (код учтен в СКУД)
  const         R8_HOLIDAY_EDITED                 = 9432;         // Редактированы праздники (код учтен в СКУД)

  const         R8_AP_IN                          = 9501;         //ТД Вход. Проход пользователя через ТД, сконфигурированную на вход.
  const         R8_AP_OUT                         = 9502;         //ТД Выход. Проход пользователя через ТД, сконфигурированную на выход.
  const         R8_AP_PASSENABLE                  = 9503;         //ТД Проход разрешен командой «Открыть замок».
  const         R8_AP_DOOROPEN                    = 9504;         //ТД Открывание двери.
  const         R8_AP_DOORNOCLOSED                = 9505;         //ТД Удержание двери
  const         R8_AP_DOORALARM                   = 9506;         //ТД Взлом двери
  const         R8_AP_DOORCLOSE                   = 9507;         //ТД Закрывание двери
  const         R8_AP_BLOCKING                    = 9508;         //ТД Блокирование
  const         R8_AP_DEBLOCKING                  = 9509;         //ТД Разблокирование
  const         R8_AP_EXITBUTTON                  = 9510;         //ТД Выход по кнопке
  const         R8_AP_RESET                       = 9511;         //ТД в норме (сброс). Восстановление после блокирования или разблокирования
  const         R8_AP_AUTHORIZATIONERROR          = 9512;         //ТД Ошибка авторизации пользователя
  const         R8_AP_CODEFORGERY                 = 9513;         //ТД Попытка подбора кода
  const         R8_AP_REQUESTPASS                 = 9514;         //ТД Запрос прохода. Выдается, когда ТД сконфигурирована на проход с запросом
  const         R8_AP_FORCING                     = 9515;         //ТД Нападение
  const         R8_AP_APBERROR                    = 9516;         //ТД Нарушение правил прохода
  const         R8_AP_ACCESSGRANTED               = 9517;         //ТД Доступ разрешен
  const         R8_AP_ACCESSTIMEOUT               = 9518;         //ТД Таймаут

  const         R8_COMMAND_AP_PASS                = 9521;         //ТД Разрешить проход
  const         R8_COMMAND_AP_LOCK                = 9522;         //ТД Закрыть
  const         R8_COMMAND_AP_UNLOCK              = 9523;         //ТД Открыть
  const         R8_COMMAND_AP_RESET               = 9524;         //ТД Сброс
  const         R8_COMMAND_AP_OFF                 = 9525;         //ТД отключить
  const         R8_COMMAND_AP_ON                  = 9526;         //ТД подключить

  const         R8_AP_CHECK                       = 9531;         //ТД. Неисправность
  const         R8_AP_RESTORE                     = 9532;         //ТД. Восстановлена (исключен из тревож. сообщ.)
  const         R8_AP_NORIGTH                     = 9533;         //ТД. Нет прав на управление
  const         R8_AP_HW_OK                       = 9534;         //ТД. Оборудование в норме
  const         R8_AP_HW_FAULT                    = 9535;         //ТД. Оборудование неисправно
  const         R8_BLOCK_AP_DATA                  = 9536;         //ТД. Блок режимов и состояний
  //const       R8_BLOCK_AP_STATE                 = 9537;         //ТД. Блок состояний

  const         R8_COMMAND_AP_CREATE              = 9541;         //ТД создать +
  const         R8_COMMAND_AP_CHANGE              = 9542;         //ТД редактировать +
  const         R8_COMMAND_AP_DELETE              = 9543;         //ТД удалить +
  const         R8_COMMAND_AP_SERNUM_DELETE       = 9544;         //ТД удалить по sernum
  const         R8_COMMAND_AP_CONFIG              = 9545;         //ТД запрос конфигурации
  const         R8_AP_CREATE                      = 9546;         //ТД создана +
  const         R8_AP_CHANGE                      = 9547;         //ТД редактирована +
  const         R8_AP_DELETE                      = 9548;         //ТД удалена +
  const         R8_AP_CONFIG                      = 9549;         //ТД конфигурация
  const         R8_AP_OFF                         = 9550;         //ТД выключена
  const         R8_AP_ON                          = 9551;         //ТД включена
  const         R8_COMMAND_APSHZMK_SET            = 9552;         //установить ШС замка
  const         R8_APSHZMK_SET                    = 9553;         //установлен ШС замка 
  const         R8_COMMAND_APSHZMK_DELETE         = 9554;         //удалить ШС замка
  const         R8_APSHZMK_DELETE                 = 9555;         //удален ШС замка

  const         SCU_GET_DEVVER                    = 9801;         //
  const         SCU_DEVVER                        = 9802;         //
  const         SCU_GET_BOOTVER                   = 9803;         //
  const         SCU_BOOTVER                       = 9804;         //
  const         SCU_GET_DEVSTATE                  = 9805;         //
  const         SCU_DEVSTATE                      = 9806;         //
  const         SCU_GET_ALTDEVSTATE               = 9807;         //
  const         SCU_ALTDEVSTATE                   = 9808;         //
  const         SCU_GET_STATEWORD                 = 9809;         //
  const         SCU_STATEWORD                     = 9810;         //
  const         SCU_GET_PARAMARRAY                = 9811;         //
  const         SCU_PARAMARRAY                    = 9812;         //
  const         SCU_TIME_GET                      = 9813;         //
  const         SCU_TIME                          = 9814;         //
  const         SCU_TIME_EDIT                     = 9815;         //
  const         SCU_TIME_EDITED                   = 9816;         //
  const         SCU_TIME_SYNC                     = 9817;         //
  const         SCU_TIME_SYNCED                   = 9818;         //
  const         SCU_NETWORK_GET                   = 9819;         //
  const         SCU_NETWORK                       = 9820;         //
  const         SCU_NETWORK_EDIT                  = 9821;         //
  const         SCU_NETWORK_EDITED                = 9822;         //
  const         SCU_CARD_REQUEST                  = 9823;         //
  const         SCU_CARD_REQUESTED                = 9824;         //
  const         SCU_PRG_WRITE                     = 9825;         //
  const         SCU_PRG_READ                      = 9826;         //
  const         SCU_PRG_DATA                      = 9827;         //

  const         SCU_SH_EDIT                       = 9831;         // -
  const         SCU_SH_EDITED                     = 9832;         // -
  const         SCU_SH_GET                        = 9833;         // -
  const         SCU_SH                            = 9834;         // -
  const         SCU_RELAY_EDIT                    = 9835;         // -
  const         SCU_RELAY_EDITED                  = 9836;         // -
  const         SCU_RELAY_GET                     = 9837;         // -
  const         SCU_RELAY                         = 9838;         // -
  const         SCU_USK_EDIT                      = 9839;         // -
  const         SCU_USK_EDITED                    = 9840;         // -
  const         SCU_USK_GET                       = 9841;         // -
  const         SCU_USK                           = 9842;         // -
  const         SCU_AP_EDIT                       = 9843;         // -
  const         SCU_AP_EDITED                     = 9844;         // -
  const         SCU_AP_GET                        = 9845;         // -
  const         SCU_AP                            = 9846;         // -
  const         SCU_USER_ADD                      = 9847;         // -
  const         SCU_USER_ADDED                    = 9848;         // -
  const         SCU_USER_ADDNOCHECK               = 9849;         // -
  const         SCU_USER_EDIT                     = 9850;         // -
  const         SCU_USER_EDITED                   = 9851;         // -
  const         SCU_USER_DELETE                   = 9852;         // -
  const         SCU_USER_DELETED                  = 9853;         // -
  const         SCU_USER_DELETE_ALL               = 9854;         // -
  const         SCU_USER_DELETED_ALL              = 9855;         // -
  const         SCU_USER_GET                      = 9856;         // -
  const         SCU_USER                          = 9857;         // -
  const         SCU_USER_GETLIST                  = 9858;         //

  const         SCU_TC_RESTORE                    = 9861;         //
  const         SCU_TC_RESTORED                   = 9862;         //
  const         SCU_SHOCHR_DISARM                 = 9863;         //
  const         SCU_SHOCHR_DISARMED               = 9864;         //
  const         SCU_SHOCHR_ARM                    = 9865;         //
  const         SCU_SHOCHR_ARMED                  = 9866;         //
  const         SCU_SHOCHR_RESET                  = 9867;         //
  const         SCU_SHTREV_RESET                  = 9868;         //
  const         SCU_SHFIRE_RESET                  = 9869;         //
  const         SCU_SH_RESETED                    = 9870;         //
  const         SCU_RELAY_1                       = 9871;         //
  const         SCU_RELAY_IS_1                    = 9872;         //
  const         SCU_RELAY_0                       = 9873;         //
  const         SCU_RELAY_IS_0                    = 9874;         //

  const         SCU_AP_PASS                       = 9875;         //
  const         SCU_AP_PASSED                     = 9876;         //
  const         SCU_AP_LOCK                       = 9877;         //
  const         SCU_AP_LOCKED                     = 9878;         //
  const         SCU_AP_UNLOCK                     = 9879;         //
  const         SCU_AP_UNLOCKED                   = 9880;         //
  const         SCU_AP_RESET                      = 9881;         //
  const         SCU_AP_RESETED                    = 9882;         //
  const         SCU_NOTANSWER                     = 9891;         //
  const         SCU_INCORRECTANSWER               = 9892;         //
  const         SCU_HW_EDIT                       = 9893;         //+
  const         SCU_HW_EDITED                     = 9894;         //+
  const         SCU_HW_GET                        = 9895;         //
  const         SCU_HW                            = 9896;         //
  const         SCU_CARD_ADD                      = 9901;         // -
  const         SCU_CARD_ADDED                    = 9902;         // -
  const         SCU_CARD_DELETE                   = 9903;         // -
  const         SCU_CARD_DELETED                  = 9904;         // -
  const         SCU_USERMAP_WR_PERMIT             = 9905;         // -
  const         SCU_USERMAP_WR_ALL                = 9906;         // -






 
implementation

end.



unit R8OnReciveMode2;


interface

  procedure TCStructState(Ix, Kind: byte);
  procedure TCCodeState(Ix, Kind: byte);
  function CalcTCState1(HwState, AlarmMsg: word): word;
  procedure CalcTcState2(P: Pointer; tState: word);
  procedure ReadBCPTelegram;
  procedure UpdateTcUser(p: pointer);
  procedure CalcStateZN(zn: word; PrmKind: byte = 0; Prm: word = 0; Us: word = 0);
  function APModeToRostek(ptc: pointer): byte;
  function APStateToRostek(ptc: pointer): byte;

implementation

uses windows, R8Unit, Comm, SysUtils, SharedBuffer, mMain, constants,
  KSBParam, mCheckZoneOperation, mMode2;

const PrmName: array [0..37] of string =
  (
    '', 'Пользователь', 'Система', 'Сист.ошибка', 'Скрипт', 'СУ',
    'ПК', 'Оператор', 'Конс. оператор', 'TCOHARDWARETROUBLECODE', 'ПК оператор',
    'ПК проверенный оператор', 'SLUICEDOOR', 'SLUICEOPERATOR', 'TRAINSTATE', 'Гость',
    'СК-01 УД', 'СКУ-01 вх.', 'БЦП спец. сообщ.', 'TRAINDETAIL', 'Польз. команда',
    'Вых.', 'OUTDETAIL', 'АСПТ СДУ', 'АСПТ вес', 'PPD01',
    'АСПТ СМК', 'АСПТ оповещ.', 'SOVATONESIGNALDURATION', 'Сист. инфо.', 'Р20 элемент',
    'Тип подключения ПК', 'FALSEALARM', 'Сетевой БЦП', 'Ошибка удал.тестирования', 'PPO01',
    'PPO01 внеш. вход', 'АСПТ внеш. вход'
   );


//---------------------------------------------------------//
//-----                TCStructState                  -----//
//---------------------------------------------------------//

procedure TCStructState(Ix, Kind: byte);
var
 ptc: PTTC;
 j, tState: word;
 before: word;

begin

  with rbcp, aMain do begin

    // объект не найден в памяти драйвера (*.r8c)
    ptc:= rub.FindTC(256*rbuf[ix+3]+rbuf[ix+2], 0);
    if ptc=nil then
      exit;

    // объект не найден в БЦП
    if Kind in [5] then
      if 256*rbuf[ix+21]+rbuf[ix+20]=$FFFF then
        exit;

    // вычисление состояний
    tState:= CalcTCState1(
      256*rbuf[ix+8]+rbuf[ix+7],
      256*rbuf[ix+6]+rbuf[ix+5] );
    if (tState and $40)>0 then
    begin
      Raise Exception.Create( 'Неизвестное состояние ТС' );
      exit;
    end;

    {!!! ЭТО УБРАТЬ vvv}
    case 256*rbuf[ix+8]+rbuf[ix+7] of
      $104: // ШС Проник.(Тревога)
        if (rbuf[Ix+4] and $04)>0
          then tState:= $05;
      $105: // ШС Неиспр.КЗ
        if (rbuf[Ix+4] and $04)>0
          then tState:= $09;
    end;
    {^^^}


    //2 проход (HW+Событие)
    //Отсекание неизв. + откл.
    if (tState and $10)=0 then
    case ptc^.Kind of

      1..3:
      begin
        //В
        if ((ptc^.Kind=1)and((rbuf[ix+9] and 1)>0))or(ptc^.Kind<>1) then
          tState:= tState or 2;
        //
        case ptc^.HWType of
          32:
          begin
            //Н
            if (rbuf[ix+4] and $08)>0 then
              tState:= tState or $08;
          end;//32:
          1,4,9,16,17:
          begin
            //HW (готовность)
            if ptc^.Kind=1
              then j:= (rbuf[ix+9] and 6) shr 1
              else j:= rbuf[ix+9];
            if j=0
              then tState:= tState or $01
              else tState:= tState and $fe;
          end;//1,4,9,16,17:
        end;//case ptc^.HWType

        //СНТ
        case 256*rbuf[ix+6]+rbuf[ix+5] of
          0:;
          $0103,
          $0201,
          $0301: tState:= tState or $04; //т
          $0104,
          $0202,
          $0302: tState:= tState or $08; //н
          $8302: tState:= tState or $20; //сн
        end;
      end; //1..3:

      4:
      begin
        //зануление мл. бита данных
        tState:= tState and $fc;
        //н
        case rbuf[ix+9] of
          0: tState:= tState or $00; //обл.0
          1: tState:= tState or $01; //обл.1
          2: tState:= tState or $08; //+н
          3: tState:= tState or $02; //обл.2
          4: tState:= tState or $03; //обл.3
        end;
        //СНТ
        case 256*rbuf[ix+6]+rbuf[ix+5] of
          $0,
          $4,
          $0401,
          $0402,
          $0406,
          $0407:;
          $0403: tState:= tState or $08; //н
          $8302: tState:= tState or $20; //сн
          $0404,
          $0405,
          $0408,
          $0409: tState:= tState or $04; //т
        end;
      end;//4

      5:
      begin
        if (rbuf[ix+9] and 1)>0 then
          tState:= tState or $02;        // вкл.
        //сн
        case 256*rbuf[ix+6]+rbuf[ix+5] of
          $0:;
          $0504: tState:= tState or $08; //н
          $8302: tState:= tState or $20; //сн
        end;
      end;//5

      6:
      begin
        case 256*rbuf[ix+6]+rbuf[ix+5] of
          $0,
          $60c,
          $60d:;
          $605:  tState:= $03; //уд.
          $606:  tState:= $04; //вз.
          $8302: tState:= $20; //сн
        end;
      end;//6

      7:
      begin
        if (rbuf[ix+9] and 1)>0 then
          tState:= tState or $02;
        case 256*rbuf[ix+6]+rbuf[ix+5] of
          $0:;
          $704:  tState:= tState or $04;  //т
          $8302: tState:= tState or $20;  //сн
        end;
      end;//7

      9:
      begin
        if (rbuf[ix+9] and 1)>0 then
          tState:= tState or $02;
        case 256*rbuf[ix+6]+rbuf[ix+5] of
          $0:;
          $901:  tState:= tState or $01;  //авт.
          $903:  tState:= tState and $fe;  //дверь
          $904,
          $905,
          $907:  tState:= tState or $04;  //т
          $90A..$90F: tState:= tState or $08;  //н
          $8302: tState:= tState or $20;  //сн
        end;
      end;//7

    end; //case

    before:= ptc^.State;
    CalcTcState2(ptc, tState);

    // печать

    if Option.Log_State then
      Log('Log_State: ' + Format(
        'Сост.TC #%d.%d [%.4d]:  $%x: $%x: $%x, $%0:2.2x -> $%0:2.2x -> $%0:2.2x, comd=%d',
        [ptc^.Kind, ptc^.Number, ptc^.Sernum, 256*rbuf[ix+6]+rbuf[ix+5], 256*rbuf[ix+8]+rbuf[ix+7], before, tState, ptc^.State, ord(comd)]
        ));

  end; //with

end;


//---------------------------------------------------------//
//-----                TCCodeState                    -----//
//---------------------------------------------------------//

procedure TCCodeState(Ix, Kind: byte);
var
 ptc: PTTC;
 HwState,
 AlarmMsg,
 tState,
 before: word;


begin
  with rbcp, aMain do begin

    ptc:= rub.FindTC(256*rbuf[ix+3]+rbuf[ix+2], 0);
    if ptc=nil then
      exit;

    // объект не найден в БЦП
    if Kind in [7] then
      if 256*rbuf[ix+11]+rbuf[ix+10]=$FFFF then
        exit;

    // вычисление состояний
    HwState:= 256*rbuf[ix+5]+rbuf[ix+4];
    AlarmMsg:= 256*rbuf[ix+7]+rbuf[ix+6];
    tState:= CalcTCState1(HwState, AlarmMsg);
    if (tState and $40)>0 then
    begin
      Raise Exception.Create( 'Неизвестное состояние ТС' );
      exit;
    end;

    // готовность к восстановлению
    if (HwState=$104)and(AlarmMsg=$103) or
       (HwState=$105)and(AlarmMsg=$104) or
       (HwState=$202)and(AlarmMsg=$201) or
       (HwState=$302)and(AlarmMsg=$301) or
       (HwState=$104)and(AlarmMsg=$000) or //для СКУ-02       
       (HwState=$105)and(AlarmMsg=$000) or //для СКУ-02
       (HwState=$104)and(AlarmMsg=$8302)   //для СКУ-02
    then
    case 256*rbuf[ix+9]+rbuf[ix+8] of
      1:
        tState:= tState or $01;  // готов
      else
        tState:= tState and $fe;// не готов
    end;


    before:= ptc^.State;
    CalcTcState2(ptc, tState);

    if Option.Log_State then
      Log('Log_State: ' + Format(
        'Сост.TC #%d.%d [%.4d]:  $%x: $%x: $%x,  $%x->$%x->$%x, comd=%d',
        [ptc^.Kind, ptc^.Number, ptc^.Sernum, 256*rbuf[ix+5]+rbuf[ix+4], 256*rbuf[ix+7]+rbuf[ix+6], 256*rbuf[ix+9]+rbuf[ix+8], before, tState, ptc^.State, ord(comd)]
        ));

  end; //with

end;


//---------------------------------------------------------//
//-----                CalcTCState1                   -----//
//---------------------------------------------------------//
function CalcTCState1(HwState, AlarmMsg: word): word;
begin
  Result:= $40;

  if (HwState=0) and (AlarmMsg=0) then
  begin
    Result:= $10;               // ТС Отключено
    exit;
  end;

  case HwState of
    $101:  Result:= $03;        // ШС Взят
    $102:  Result:= $01;        // ШС Готов
    $103:  Result:= $00;        // ШС Не готов
    $104:  Result:= $04;        // ШС Проник.(Тревога)
    $105:  Result:= $08;        // ШС Неиспр.КЗ
    $106:  Result:= $03;        // ШС Задержка на вход (м.б. не обрабатывать ?)
    $107:  Result:= $01;        // ШС Задержка на выход (м.б. не обрабатывать ?)
    $108:  Result:= $00;        // ШС Ожидание готовности (м.б. не обрабатывать ?)
    $109:  Result:= $08;        // ШС Ошибка ДК (м.б. не обрабатывать ?)
    $201:  Result:= $03;        // ШС Норма (взят)
    $202:  Result:= $06;        // ШС Тревога
    $203:  Result:= $08;        // ШС Неисправность
    $204:  Result:= $07;        // ШС Готов к восстановлению
    $205:  Result:= $03;        // ШС На проверке м.б. не обрабатывать ?
    $301:  Result:= $03;        // ШС Норма (Взят)
    $302:  Result:= $06;        // ШС Пожар
    $303:  Result:= $08;        // ШС Неисправность
    $304:  Result:= $04;        // ШС Внимание
    $305:  Result:= $07;        // ШС Готов к восстановлению
    $401:  Result:= $00;        // ШС Обл. 0
    $402:  Result:= $01;        // ШС Обл. 1
    $403:  Result:= $08;        // ШС неисправность
    $404:  Result:= $00;        // ШС готов
    $405:  Result:= $02;        // ШС Обл. 2
    $406:  Result:= $03;        // ШС Обл. 3
    $407:  Result:= $04;        // ШС Трев. Обл. 0
    $408:  Result:= $05;        // ШС Трев. Обл. 1
    $409:  Result:= $06;        // ШС Трев. Обл. 2
    $40A:  Result:= $07;        // ШС Трев. Обл. 3
    
    $501:  Result:= $03;        // ИУ вкл
    $502:  Result:= $01;        // ИУ выкл
    $503:  Result:= $01;        // ИУ задержка вкл
    $504:  Result:= $08;        // ИУ неисправность
    $601:  Result:= $01;        // ТД Норма
    $602:  Result:= $02;        // ТД Дверь открыта
    $603:  Result:= $03;        // ТД Удержание
    $604:  Result:= $04;        // ТД Взлом
    $605:  Result:= $05;        // ТД Заблокирована
    $606:  Result:= $06;        // ТД Разблокирована
    $607:  Result:= $07;        // ТД Нападение
    $701:  Result:= $01;        // Терм. норма
    $702:  Result:= $03;        // Терм. заблокирован

    $801:  Result:= $00;        // ШЛ Норма
    $802:  Result:= $01;        // ШЛ Не готов
    $803:  Result:= $08;        // ШЛ Занят
    $804:  Result:= $00;        // ШЛ заблокирован
    $805:  Result:= $02;        // ШЛ разблокирован
    $806:  Result:= $03;        // ШЛ Дверь открыта
    $807:  Result:= $04;        // ШЛ Дверь не закрыта
    $808:  Result:= $05;        // ШЛ Взлом двери

    $901:  Result:= $02;        // ASPT Автоматика включена
    $902:  Result:= $00;        // ASPT Автоматика отключена
    $903:  Result:= $00;        // ASPT Дверь открыта
    $904:  Result:= $04;        // ASPT Пожар
    $905:  Result:= $04;        // ASPT Внимание
    $906:  Result:= $08;        // ASPT Неисправность
    $907:  Result:= $04;        // ASPT Задержка на эвакуацию
    $908:  Result:= $00;        // ASPT Пуск ОТВ
    $909:  Result:= $00;        // ASPT Пуск прошел
    $90A:  Result:= $08;        // ASPT Неисправность датчика ОТВ
    $90B:  Result:= $08;        // ASPT Неисправность СДУ
    $90C:  Result:= $08;        // ASPT Неисправность выходов СКУП-01
    $90D:  Result:= $08;        // ASPT Неисправность ППО-01
    $90E:  Result:= $08;        // ASPT Неисправность датчика двери
    $90F:  Result:= $08;        // ASPT Неисправность

    $A01:  Result:= $00;        // ВИДЕО Норма
    $A02:  Result:= $01;        // ВИДЕО На охране
    $A03:  Result:= $08;        // ВИДЕО Тревога
    $A04:  Result:= $00;        // ВИДЕО Неисправность

    $8300: Result:= $40;        // Неизвест. сост.
    $8301: Result:= $01;        // Оборудование ТС в норме
    $8302: Result:= $08;        // Оборудование ТС не найдено
    $8303: Result:= $08;        // Оборудование ТС не сконфигурировано
    $8304: Result:= $08;        // Оборудование отключено (неисправность ТС, ссылка на не существующее оборудование)
    $8305: Result:= $08;        // Потеря связи с оборудованием ТС
    $8306: Result:= $08;        // Потеря связи с ЛБ
    $8307: Result:= $08;        // Неисправность оборудования ТС
    $8308: Result:= $08;        // Объект ТС отключен. Опрос выкл.
    $8309: Result:= $08;        // Шунтирование линии связи в СКЛБ
    $830A: Result:= $08;        // КЗ линии связи в СКЛБ
    $830B: Result:= $08;        // Готов к восстановлению
  end;


  case AlarmMsg of

    $8301,
    $8303:
      Result:= Result and $f9;  // Оборудование ТС в норме (Нет тревог и неисправностей)

    $103,                       // ШС Проникновение
    $109,                       // ШС Задержка вх. Проникновение
    $10A,                       // ШС Задержка вых. Проникновение
    $201,                       // ШС Тревога
    $301,                       // ШС Пожар
    $303,                       // ШС Внимание
    $404,                       // ШС Трев. Обл. 0
    $405,                       // ШС Трев. Обл. 1
    $408,                       // ШС Трев. Обл. 2
    $409,                       // ШС Трев. Обл. 3
    $605,                       // ТД Удержание
    $606,                       // ТД Взлом
    $60D,                       // ТД Подбор
    $60F,                       // ТД Принуждение
    $704,                       // ТЕРМ Подбор
    $809,                       // ШЛ Взлом двери
    $80F,                       // ШЛ Подбор
    $811,                       // ШЛ Тревога вх.
    $905,                       // ASPT Автоматический пуск
    $906,                       // ASPT Дистанционный пуск
    $907,                       // ASPT Ручной пуск
    $909,                       // ASPT Задержка на эвакуацию
    $90A,                       // ASPT Пуск ОТВ
    $913,                       // ASPT Пожар
    $A03:                       // ВИДЕО Тревога
      Result:= Result or $04;

    $104,                       // ШС Неисправность
    $202,                       // ШС Неисправность
    $302,                       // ШС Неисправность
    $403,                       // ШС неисправность
    $504,                       // ИУ неисправность
    $90F,                       // ASPT Ошибка срабатывания выхода СКУП-01
    $910,                       // ASPT Неисправность
    $A04,                       // ВИДЕО Неисправность
    $8302:                      // Оборудование неисправность
      Result:= Result or $08;

    $8300:
      Result:= $40;             // Неизвест. сост.

  end;

end;





//---------------------------------------------------------//
//-----                CalcTCState2                   -----//
//---------------------------------------------------------//
procedure CalcTcState2(P: Pointer; tState: word);
var
  ptc: PTTC;
  mes: KSBMES;
  st: String;
  data: PChar;
  
begin
  ptc:= P;

  with aMain, Option do begin

    if FindNuo(2, ptc^.Sernum) <> Nil then
    begin
      ptc^.State:= tState;
      StateString(2, ptc, ptc^.State, st);
      Log('NIL ' + st);
      DelNuo(2, ptc^.Sernum);
    end

    else

    begin
      Init(mes);
      mes.SysDevice:= SYSTEM_OPS;
      mes.NetDevice:= rub.NetDevice;
      mes.BigDevice:= rub.BigDevice;
      mes.SmallDevice:= ptc^.Number;
      //
      case ptc^.Kind of

        1..3:
        begin
          mes.TypeDevice:= 5;
          //
          //Готовность
          if (tState and $05)<>(ptc^.State and $05) then    //=$11 включился
          if (tState and $10)=0 then // включен
          case (tState and $05) of
            $00:
            begin
              ptc^.State:= ptc^.State and $fe;
              mes.Code:= R8_SH_NOTREADY;
              st:= Format( 'ШС #%d [%.4d] не готов', [ptc^.Number, ptc^.Sernum] );
              Log('SEND: ' + st);
              Send(mes);
            end;
            $01:
            begin
              ptc^.State:= ptc^.State or $01;
              mes.Code:= R8_SH_READY;
              st:= Format( 'ШС #%d [%.4d] готов', [ptc^.Number, ptc^.Sernum] );
              Log('SEND: ' + st);
              Send(mes);
            end;
            $04:
            begin
              ptc^.State:= ptc^.State and $fe;
              mes.Code:= R8_SH_NOTREADY_IN_ALARM;
              st:= Format( 'ШС #%d [%.4d] не готов в тревоге', [ptc^.Number, ptc^.Sernum] );
              Log('SEND: ' + st);
              Send(mes);
            end;
            $05:
            begin
              ptc^.State:= ptc^.State or $01;
              mes.Code:= R8_SH_READY_IN_ALARM;
              st:= Format( 'ШС #%d [%.4d] готов в тревоге', [ptc^.Number, ptc^.Sernum] );
              Log('SEND: ' + st);
              Send(mes);
            end;
           { $08:
            begin
              ptc^.State:= ptc^.State and $fe;
              mes.Code:= R8_SH_NOTREADY_IN_CHECK;
              st:= Format( 'ШС #%d [%.4d] не готов в неисправности', [ptc^.Number, ptc^.Sernum] );
              Log('SEND: ' + st);
              Send(mes);
            end;
            $09:
            begin
              ptc^.State:= ptc^.State or $01;
              mes.Code:= R8_SH_READY_IN_CHECK;
              st:= Format( 'ШС #%d [%.4d] готов в неисправности', [ptc^.Number, ptc^.Sernum] );
              Log('SEND: ' + st);
              Send(mes);
            end;  }
          end;//case


          //Внимание! При восстановлении снятого ШС пользователь=0
          //М.б при снятии запомнить пользователя и тут его вспомнить?
          if (tState and $0c)<>(ptc^.State and $0c) then
          if (tState and $1c)=0 then // включен
          if (ptc^.tempUser>0) then
          begin
            ptc^.State:= ptc^.State and $f3;
            mes.Code:= R8_SH_RESTORE;
            TheKSBParam.WriteIntegerParam(mes, data, 'Номер пользователя', ptc^.tempUser);
            st:= Format( 'ШС #%d [%.4d] восстановлен пользователем #%d', [ptc^.Number, ptc^.Sernum, ptc^.tempUser] );
            Log('SEND: ' + st);
            Send(mes);
          end;

          //Охрана
          {
          if (tState and $02)<>(ptc^.State and $02) then
          if (tState and $10)=0 then // включен
          if (tState and $0c)=0 then // нет тревоги и неиспр.
          if (tState and $02)=0 then
          begin
            ptc^.State:= ptc^.State and $fd;
            //mes.Code:= R8_SH_DISARMED;
            //st:= Format( 'ШС #%d [%.4d] снят', [ptc^.Number, ptc^.Sernum] );
            //Log('SEND: ' + st);
            //Send(mes);
          end
          else
          begin
            ptc^.State:= ptc^.State or $02;
            //mes.Code:= R8_SH_ARMED;
            //st:= Format( 'ШС #%d [%.4d] взят', [ptc^.Number, ptc^.Sernum] );
            //Log('SEND: ' + st);
            //Send(mes);
          end;
          }

          //Неисправность
          {
          if (tState and $08)<>(ptc^.State and $08) then    //=$11 включился
          if (tState and $10)=0 then // включен
          if (tState and $08)>0 then
          begin
            ptc^.State:= ptc^.State or $08;
            mes.Code:= R8_SH_CHECK;
            st:= Format( 'ШС #%d [%.4d] неисправен', [ptc^.Number, ptc^.Sernum] );
            Log('SEND: ' + st);
            Send(mes);
          end;
          }

          //Откл.
          if (tState and $10)<>(ptc^.State and $10) then
          if (tState and $10)>0 then
          begin
            ptc^.State:= $10;
            mes.Code:= R8_SH_OFF;
            st:= Format( 'ШС #%d [%.4d] отключен', [ptc^.Number, ptc^.Sernum] );
            Log('SEND: ' + st);
            Send(mes);
          end
          else
          begin
            ptc^.State:= ptc^.State and $ef; //здесь на уже восстановленный ТС может наложиться старая сброшенная тревога
            mes.Code:= R8_SH_ON;
            st:= Format( 'ШС #%d [%.4d] подключен', [ptc^.Number, ptc^.Sernum] );
            Log('SEND: ' + st);
            Send(mes);
          end;
        end;

        4:
        begin
          mes.TypeDevice:= 5;
          //Откл.
          if (tState and $10)<>(ptc^.State and $10) then
          if (tState and $10)>0 then
          begin
            ptc^.State:= $10;
            mes.Code:= R8_SH_OFF;
            st:= Format( 'ШС #%d [%.4d] отключен', [ptc^.Number, ptc^.Sernum] );
            Log('SEND: ' + st);
            Send(mes);
          end
          else
          begin
            ptc^.State:= ptc^.State and $ef;
            mes.Code:= R8_SH_ON;
            st:= Format( 'ШС #%d [%.4d] подключен', [ptc^.Number, ptc^.Sernum] );
            Log('SEND: ' + st);
            Send(mes);
          end;
        end;

        5:
        begin
          mes.TypeDevice:= 7;
          //Откл.
          if (tState and $10)<>(ptc^.State and $10) then
          if (tState and $10)>0 then
          begin
            ptc^.State:= $10;
            mes.Code:= R8_RELAY_OFF;
            st:= Format( 'Реле #%d [%.4d] отключено', [ptc^.Number, ptc^.Sernum] );
            Log('SEND: ' + st);
            Send(mes);
          end
          else
          begin
            ptc^.State:= ptc^.State and $ef;
            mes.Code:= R8_RELAY_ON;
            st:= Format( 'Реле #%d [%.4d] подключено', [ptc^.Number, ptc^.Sernum] );
            Log('SEND: ' + st);
            Send(mes);
          end;
        end;

        6:
        begin
          mes.SysDevice:= 1; //изм.08.11.15
          mes.TypeDevice:= 2; //изм.08.11.15
          //Откл.
          if (tState and $10)<>(ptc^.State and $10) then
          if (tState and $10)>0 then
          begin
            ptc^.State:= $10;
            mes.Code:= R8_AP_OFF;
            st:= Format( 'ТД #%d [%.4d] отключена', [ptc^.Number, ptc^.Sernum] );
            Log('SEND: ' + st);
            Send(mes);
          end
          else
          begin
            ptc^.State:= ptc^.State and $ef;
            mes.Code:= R8_AP_ON;
            st:= Format( 'ШС #%d [%.4d] подключена', [ptc^.Number, ptc^.Sernum] );
            Log('SEND: ' + st);
            Send(mes);
          end;

          //Состояние
          if (tState and $07)<>(ptc^.State and $07) then
          if (tState and $38)=0 then // включен и исправен
          case (tState and $07) of
            1: //восстановлена
            begin
              ptc^.State:= tState;
              mes.Code:= SUD_DOOR_CLOSE{R8_AP_RESET};
              st:= Format( 'ТД #%d [%.4d] в норме (сброс)', [ptc^.Number, ptc^.Sernum] );
              Log('SEND: ' + st);
              Send(mes);
            end;
            2: //Открыта
            begin
              ptc^.State:= tState;
              mes.Code:= SUD_DOOR_OPEN{R8_AP_DOOROPEN};
              st:= Format( 'ТД #%d [%.4d] открыта', [ptc^.Number, ptc^.Sernum] );
              Log('SEND: ' + st);
              Send(mes);
            end;
          end;//case
        end;

        7:
        begin
          mes.TypeDevice:= 8;
          //Откл.
          if (tState and $10)<>(ptc^.State and $10) then
          if (tState and $10)>0 then
          begin
            ptc^.State:= $10;
            mes.Code:= R8_TERM_OFF;
            st:= Format( 'Терм. #%d [%.4d] отключен', [ptc^.Number, ptc^.Sernum] );
            Log('SEND: ' + st);
            Send(mes);
          end
          else
          begin
            ptc^.State:= ptc^.State and $ef;
            mes.Code:= R8_TERM_ON;
            st:= Format( 'Терм. #%d [%.4d] подключен', [ptc^.Number, ptc^.Sernum] );
            Log('SEND: ' + st);
            Send(mes);
          end;
        end;

        9:
        begin
          mes.TypeDevice:= 12;
          //Откл.
          if (tState and $10)<>(ptc^.State and $10) then
          if (tState and $10)>0 then
          begin
            ptc^.State:= $10;
            mes.Code:= R8_ASPT_OFF;
            st:= Format( 'АСПТ #%d [%.4d] отключен', [ptc^.Number, ptc^.Sernum] );
            Log('SEND: ' + st);
            Send(mes);
          end
          else
          begin
            ptc^.State:= ptc^.State and $ef;
            mes.Code:= R8_ASPT_ON;
            st:= Format( 'АСПТ #%d [%.4d] подключен', [ptc^.Number, ptc^.Sernum] );
            Log('SEND: ' + st);
            Send(mes);
          end;
        end;

      end; //case

    end; //else

    // сост.зоны
    CalcStateZN(ptc^.ZoneNumber, 0, 0, ptc^.TempUser);

  end;// with



end;




//---------------------------------------------------------//
//---------------------------------------------------------//
//-----                                               -----//
//-----                                               -----//
//-----                                               -----//
//---------------------------------------------------------//
//---------------------------------------------------------//

procedure ReadBCPTelegram;


  procedure PrintEvent(Title: String);
  var
    s: String;
    i: word;
  begin

    with rbcp, aMain, Option do begin
      if not Log_UnknownEvent then
        exit;
      s:='';
      for i:=0 to rbuf[5]+7 do
      begin
        if i=13 then
          s:= s + '.';
        if i=rbuf[5]+5 then
          s:= s + '.';
        s:= s + inttohex(rbuf[i],2);
      end;
      Log( Title + ' ' + s);
    end;
  end;

var
  st, s1: string;
  i: word;

  Id,
  Sernum,
  Kind,
  State,
  Prm: word;
  PrmStr: String;
  Card: boolean;

  CuNumber: Longword;
  CuName: String;

  UnknownEvent: word;

  ptc: PTTC;
  pcu: PTCU;
  pzn: PTZN;
  pgr: PTGR;
  pus: PTUS;
  pti: PTTI;
  ppr: PTPR;
  prn: PTRN;
  prp: PTRP;

  mes: KSBMES;
  t: PTTelegram;
  m: array [0..511] of byte;
  data: PChar;

begin

  Debug('F:ReadBCPTelegram');
  data:='';
  UnknownEvent:= 0;

  with rbcp, aMain, Option do begin
    QueryPerformanceFrequency(_f.QuadPart);
    QueryPerformanceCounter(_c1.QuadPart);

  TRY
    //выход по пустышкам
    if (rbuf[5]=7)and(rbuf[10]=$8d) then
      exit;

    //печать
    if Log_Debug then
    begin
      st:= '';
      for i:=0 to rbuf[5]+7 do
        st:= st + inttohex(rbuf[i],2);
      //Log('Log_RBcpTel: ' + st);
      ChangeVal(st, s1);
      {$IFDEF WITH_CONNECT}
        DLog(s1);
      {$ENDIF}
      st:= '';
    end;

    //выход по ошибке
    if rbcp.RetCode>0 then
      exit;
    //
    //
    //
    //

    st:= '';    
    case rbuf[10] of

      $80:
      begin
        st:= Format('Номер БЦП %d Версия БЦП %d.%d. Версия БД %d.%d', [ rbuf[3] + 256*rbuf[4], rbuf[13], rbuf[14], rbuf[15], rbuf[16] ]);
        Log(st);
      end;

      $85:
      case rbuf[13] of //тип объекта

        2://объект ТС
        begin

          case rbuf[14] of
            1, 2: // запрос структуры состояния ТС
              TCStructState( 15, rbuf[14] );
            3, 4: // запрос кода состояния ТС
              TCCodeState( 15, rbuf[14] );
            5, 6: // запрос массива структуры состояния ТС
              for i:=1 to 256*rbuf[16] + rbuf[15]  do
                TCStructState( 17+15*(i-1), rbuf[14] );
            7, 8: // запрос массива кодов состояния ТС 
              for i:=1 to 256*rbuf[16] + rbuf[15]  do
                TCCodeState( 17+12*(i-1), rbuf[14] );
          end;
        end;//2: объект ТС


        3:// объект СУ
        begin
          pcu:= rub.FindCU( 65536*rbuf[15] + 256*rbuf[17] + rbuf[16], 0 );
          if pcu = Nil then
            exit;

          { это не запрос структуры состояния СУ |
            это не запрос структуры состояния маркированного СУ }
          if not (rbuf[14] in [1,2]) then
            exit;

          { Состояние для каждого типа СУ здесь не раскрывается,
            так как используется для внутренних задач БЦП.
            Все состояния СУ транслируются в конечном итоге
            в состояния связанных с ними ТС }
           State:= 0; // по умолчанию

          { b0-связь, b1-вскрытие }

          // потеря связи с СУ
          if ((rbuf[18] and $02)=0) and ((pcu^.flags and $10)>0)
            then State:= State or $01
            else State:= State and $fe;

          { Не работает т.к у производителя нет бита
            адекватной трактовки состяния связи }

          // вскрытие
          if (State and $01)>0 then
          if (rbuf[18] and $04)>0
            then State:= State or $02
            else State:= State and $fd;

          Init(mes);
          mes.SysDevice:= SYSTEM_OPS;
          mes.NetDevice:= rub.NetDevice;
          mes.BigDevice:= rub.BigDevice;
          mes.SmallDevice := pcu^.Number;
          mes.TypeDevice:= 9;
          mes.Code:= 0;

          if (State and 2)<>(pcu^.State and 2) then
          if (State and 2)=0 then
          begin
            mes.Code:= R8_CU_CLOSE;
            Log( Format('SEND: СУ #%d закрыт', [pcu^.Number]) );
            Send(mes);
          end;

          pcu^.State:= State;
        end;// 3: объект СУ


      end; // тип объекта 2,3,4,..


      //
      $86, $8D:
      begin
        //
        if not WorkTime then
        begin
          WorkTime:= True;
          Log('SEND: Драйвер готов к работе');
          Init(mes);
          mes.SysDevice:= SYSTEM_PROGRAM;
          mes.NetDevice:= ModuleNetDevice;
          mes.BigDevice:= NumberApplication;
          mes.TypeDevice:= 3;
          mes.Code:= R8_DRV_READY;
          Send(mes);
          StartVUBlocks;
        end;
        //
        for i:=1 to ((rbuf[5]-10) div 16)  do
        begin

          Init(mes);
          mes.SysDevice:=SYSTEM_OPS;
          mes.NetDevice:=rub.NetDevice;
          mes.BigDevice:=rub.BigDevice;
          mes.SendTime:= UnPackTime(rbuf[16*i]);
          Prm:= rbuf[16*i+12] + 256*rbuf[16*i+13];
          if rbuf[16*i+11]>0
            then PrmStr:= Format('%s #%d', [ PrmName[rbuf[16*i+11]], Prm ])
            else PrmStr:= '';
          Kind:= 0;
          State:= 0;
          UnknownEvent:= 0;

          case rbuf[16*i+4] of //тип объекта

            0:
              UnknownEvent:= rbuf[16*i+9] + 256*rbuf[16*i+10];


            1://Зона
            begin
              Id:= rub.FindIdZN( rbuf[16*i+5] );
              if Id=0 then
                Id:= rub.SetIdZN( rbuf[16*i+5] );
              //
              mes.TypeDevice:= 4;
              TheKSBParam.WriteIntegerParam(mes, data, 'Номер зоны', Id);
              TheKSBParam.WriteIntegerParam(mes, data, 'Номер пользователя', Prm);
              //
              case rbuf[16*i+9]+256*rbuf[16*i+10] of
                $8280:
                begin
                  st:= Format('Создана зона #%d [%s]. %s', [ Id, ObjectNumberToStr(rbuf[16*i+5]), PrmStr ]);
                  mes.Code:= R8_ZONE_CREATE;
                end;
                $8281:
                begin
                  st:= Format('Редактирована зона #%d [%s]. %s', [ Id, ObjectNumberToStr(rbuf[16*i+5]), PrmStr ]);
                  mes.Code:= R8_ZONE_CHANGE;
                end;
                $8282:
                begin
                  st:= Format('Удалена зона #%d [%s]. %s', [ Id, ObjectNumberToStr(rbuf[16*i+5]), PrmStr ]);
                  mes.Code:= R8_ZONE_DELETE;
                end;

                Else
                  UnknownEvent:= rbuf[16*i+9] + 256*rbuf[16*i+10];

              end;
            end;//1:Зона


            2://ТС
            begin
              Sernum:= rbuf[16*i+7] + 256*rbuf[16*i+8];

              Id:= 0;
              ptc:= rub.FindTC(Sernum, 0);
              if ptc<>nil then
              begin
                Kind:= ptc^.Kind;
                State:= ptc^.State;
                Id:= ptc^.Number;
              end;
              //
              if Id=0 then
                Id:= rub.SetIdTC(Sernum, Kind);


              case rbuf[16*i+9]+256*rbuf[16*i+10] of
                1: //квитирование
                begin
                  case Kind of
                    0: st:= Format('%s нажал "Принять" ТС #%d [%d]', [PrmStr, Id, Sernum] );
                    1..4: st:= Format('%s нажал "Принять" ШС #%d [%d]', [PrmStr, Id, Sernum] );
                    5: st:= Format('%s нажал "Принять" РЕЛЕ #%d [%d]', [PrmStr, Id, Sernum] );
                    6: st:= Format('%s нажал "Принять" ТД #%d [%d]', [PrmStr, Id, Sernum] );
                    7: st:= Format('%s нажал "Принять" ТЕРМ. #%d [%d]', [PrmStr, Id, Sernum] );
                    8: st:= Format('%s нажал "Принять" Шлюз #%d [%d]', [PrmStr, Id, Sernum] );
                    9: st:= Format('%s нажал "Принять" АСПТ. #%d [%d]', [PrmStr, Id, Sernum] );
                    $A: st:= Format('%s нажал "Принять" Видео. #%d [%d]', [PrmStr, Id, Sernum] );
                  end;
                  mes.Code:= R8_HANDSHAKE;
                end;
                $101: //+в Постановка на охрану
                begin
                  State:= State or $02;
                  mes.Code:= R8_SH_ARMED;
                  st:= Format('На охране ШС #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                  if ptc<>nil then
                    CheckZoneOperation(ptc^.ZoneNumber, 1);
                end;
                $102: //-в Снятие с охраны
                begin
                  State:= State and $fd;
                  mes.Code:= R8_SH_DISARMED;
                  st:= Format('Без охраны ШС #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                  if ptc<>nil then
                    CheckZoneOperation(ptc^.ZoneNumber, 0);
                end;
                $103: //+т Проникновение. Переход физического ШС в состояние «Тревога», когда объект находится в состоянии «Взято».
                begin
                  State:= State or $04;
                  mes.Code:= R8_SH_ALARM;                                              
                  st:= Format('Тревога проникновения ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $104: //+н Неисправность. Переход физического ШС в состояние «Неисправность», когда объект находится в состоянии «Взято», «Готов», «Не готов».
                begin
                  State:= State or $08;
                  mes.Code:= R8_SH_CHECK;
                  st:= Format('Неисправность (КЗ) ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $105: //+г+н Готов постановке на охрану или восстановлению. Переход физического ШС в состояние «Норма».
                begin
                  State:= State or $01;
                  mes.Code:= R8_SH_READY;
                  st:= Format('Переход в норму ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $106: //-г Не готов к постановке на охрану. Переход физического ШС в состояние «Тревога», когда объект находится в состоянии «Готов» или «Проникновение». Переход физического ШС в состояние «Неисправность», когда объект находится в состоянии «Проникновение» или «Неисправность».
                begin
                  State:= State and $fe;
                  mes.Code:= R8_SH_NOTREADY;
                  st:= Format('Не готов к постановке на охрану ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $107: //-т Сброс ШС
                begin
                  State:= State and $fb;
                  mes.Code:= R8_SH_RESET;
                  st:= Format('Сброс ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $108: //Ничего. Пропуск не готового к постановке на охрану объекта
                begin
                  mes.Code:= R8_SH_BYPASS;
                  st:= Format('Пропуск ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $109: //-в Задержка на вход. Переход физического ШС в состояние «Тревога», когда объект находится в состоянии «Взято» и для него определена задержка на вход.
                begin
                  mes.Code:= R8_SH_INDELAY;
                  st:= Format('Задержка на вход при снятии ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $10A: //+в Задержка на выход. Событие выдается при постановке объекта на охрану, если для него определена задержка на выход.
                begin
                  mes.Code:= R8_SH_OUTDELAY;
                  st:= Format('Задержка на выход при постановке ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $10B: //Ожидание готовности. При постановке на охрану, «Не готов»
                begin
                  mes.Code:= R8_SH_WAITFORREADY;
                  st:= Format('Ожидание готовности ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $10C: //Ожидание готовности. При постановке на охрану, «Не готов»
                begin
                  mes.Code:= R8_SH_WAITFORREADYCANCEL;
                  st:= Format('Отмена ожидания готовности ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $10D: //Дистанционный контроль пройден
                begin
                  st:= Format('Дистанционный контроль пройден. ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $10E: //Ошибка дистанционного контроля
                begin
                  st:= Format('Ошибка дистанционного контроля. ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $10F: //Внимание. Одиночная сработка.
                begin
                  st:= Format('Внимание. Одиночная сработка. ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $201://+т  Тревога. Переход физического ШС в состояние «Тревога», когда объект находится в со-стоянии «Норма».
                begin
                  State:= State or $04;
                  mes.Code:= R8_SH_ALARM;
                  st:= Format('Тревога ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $202://+н  Неисправность. Переход физического ШС в состояние «Неисправность», когда объект находится в состоянии «Норма».
                begin
                  State:= State or $08;
                  mes.Code:= R8_SH_CHECK;
                  st:= Format('Неисправность ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $203://-т Сброс ШС
                begin
                  State:= State and $fb;
                  mes.Code:= R8_SH_RESET;
                  st:= Format('Сброс ШС #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $204://+г Готов к восстановлению. Переход физического ШС в состояние «Норма».
                begin
                  State:= State or $01;
                  mes.Code:= R8_SH_READY;
                  st:= Format('Готов к восстановлению ШС #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $205://-г Не готов к восстановлению. Переход физического ШС в состояние «Тревога» или «Неисправность», когда объект находится в состоянии «Тревога». Переход физического ШС в состояние «Неисправность», когда объект находится в состоянии «Неисправность».
                begin
                  State:= State and $fe;
                  mes.Code:= R8_SH_NOTREADY;
                  st:= Format('Не готов к восстановлению ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $206://Режим проверки
                begin
                  mes.Code:= R8_SH_TEST;
                  st:= Format('Режим проверки ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $207://Проверка пройдена
                begin
                  mes.Code:= R8_SH_TESTPASSEDOK;
                  st:= Format('Проверка пройдена ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $208://Проверка не пройдена
                begin
                  mes.Code:= R8_SH_TESTTIMEOUT;
                  st:= Format('Проверка не пройдена ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $301://+т  Тревога. Переход физического ШС в состояние «Тревога», когда объект находится в со-стоянии «Норма».
                begin
                  State:= State or $04;
                  mes.Code:= R8_SH_FIRE_ALARM;
                  st:= Format('Пожар ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $302://+н  Неисправность. Переход физического ШС в состояние «Неисправность», когда объект находится в состоянии «Норма».
                begin
                  State:= State or $08;
                  mes.Code:= R8_SH_CHECK;
                  st:= Format('Неисправность ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);;
                end;
                $303://Внимание. при норме
                begin
                  mes.Code:= R8_SH_FIRE_ATTENTION;
                  st:= Format('Внимание ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $304://-т Сброс ШС
                begin
                  State:= State and $fb;
                  mes.Code:= R8_SH_RESET;
                  st:= Format('Сброс ШС #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
               $305://+г Готов к восстановлению. Переход физического ШС в состояние «Норма».
                begin
                  State:= State or $01;
                  mes.Code:= R8_SH_READY;
                  st:= Format('Готов к восстановлению ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $306://-г Не готов к восстановлению. Переход физического ШС в состояние «Тревога» или «Неисправность», когда объект находится в состоянии «Тревога». Переход физического ШС в состояние «Неисправность», когда объект находится в состоянии «Неисправность».
                begin
                  State:= State and $fe;
                  mes.Code:= R8_SH_NOTREADY;
                  st:= Format('Готов к восстановлению ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                //ШСтехн (связь-опрос ТС -неисправность-тревога- сост.2бит - сост.1бит)  с-о-н-т-2-1
                $401://Область 0. Переход физического ШС в состояние в область 0. Замкнуто для дискретных ШС
                begin
                  State:= (State and $fc) or $00;
                  mes.Code:= R8_TECHNO_AREA0;
                  st:= Format('Область 0 ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $402://Область 1. Переход физического ШС в состояние в область 1. Разомкнуто для дискретных ШС
                begin
                  State:= (State and $fc) or $01;
                  mes.Code:= R8_TECHNO_AREA1;
                  st:= Format('Область 1 ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $403://Неисправность. Переход физического ШС в состояние «Неисправность».
                begin
                  State:= (State and $f0) or $08;
                  mes.Code:= R8_SH_CHECK;
                  st:= Format('Неисправность ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $404://Тревожная область 0. Переход физического ШС в состояние в область 0, область 0 сконфигурирована как тревожная
                begin
                  State:= (State and $f0) or $04 or $00;
                  //исключение
                  mes.Code:= R8_TECHNO_AREA0;
                  send(mes);
                  mes.Code:= R8_TECHNO_ALARM;
                  st:= Format('Область 0. Тревога ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $405://Тревожная область 1. Переход физического ШС в состояние в область 1, область 1 сконфигурирована как тревожная
                begin
                  State:= (State and $f0) or $04 or $01;
                  //исключение
                  mes.Code:= R8_TECHNO_AREA1;
                  Send(mes);
                  mes.Code:= R8_TECHNO_ALARM;
                  st:= Format('Область 1. Тревога ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $406://Область 2. Переход физического ШС в состояние в область 2
                begin
                  State:= (State and $fc) or $02;
                  mes.Code:= R8_TECHNO_AREA2;
                  st:= Format('Область 2 ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $407://Область 3. Переход физического ШС в состояние в область 3
                begin
                  State:= (State and $fc) or $03;
                  mes.Code:= R8_TECHNO_AREA3;
                  st:= Format('Область 3 ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $408://Тревожная область 2. Переход физического ШС в состояние в область 2, область 2 сконфигурирована как тревожная
                begin
                  State:= (State and $f0) or $04 or $02;
                  //исключение
                  mes.Code:= R8_TECHNO_AREA2;
                  Send(mes);
                  mes.Code:= R8_TECHNO_ALARM;
                  st:= Format('Область 2. Тревога ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $409://Тревожная область 3. Переход физического ШС в состояние в область 3, область 3 сконфигурирована как тревожная
                begin
                  State:= (State and $f0) or $04 or $03;
                  //исключение
                  mes.Code:= R8_TECHNO_AREA3;
                  Send(mes);
                  mes.Code:= R8_TECHNO_ALARM;
                  st:= Format('Область 3. Тревога ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);;
                end;

                //реле (связь-резерв-неисправность-резерв-вкл-резерв) с-х-х-х-вкл-х
                $501://вкл.
                begin
                  State:= State or $02;
                  mes.Code:= R8_RELAY_1;
                  st:= Format('Включено РЕЛЕ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $502://выкл.
                begin
                  State:= State and $fd;
                  mes.Code:= R8_RELAY_0;
                  st:= Format('Выключено РЕЛЕ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $503://Задержка включения
                begin
                  State:= State and $fd;
                  mes.Code:= R8_RELAY_WAITON;
                  st:= Format('Задержка включения РЕЛЕ #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $504://неисправно
                begin
                  State:= State or $08;
                  mes.Code:= R8_RELAY_CHECK;
                  st:= Format('Неисправность РЕЛЕ #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $601://Вход (!)
                begin
                  State:= State and $7; //State:= $01;
                  mes.Code:= {R8_AP_IN} SUD_ACCESS_GRANTED;
                  st:= Format('Вход ТД #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $602://Выход (!)
                begin
                  State:= State and $7; //State:= $01;
                  mes.Code:= {R8_AP_OUT} SUD_ACCESS_GRANTED;
                  st:= Format('Выход ТД #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $603://Проход
                begin
                  State:= State and $7; //State:= $01;
                  mes.Code:= {R8_AP_PASSENABLE} SUD_ACCESS_GRANTED;
                  st:= Format(' Проход по команде «Открыть замок» ТД #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $604://Открывание двери
                begin
                  State:= $02;
                  mes.Code:= {R8_AP_DOOROPEN} SUD_DOOR_OPEN;
                  st:= Format('Открывание двери ТД #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $605://Удержание (!)
                begin
                  State:= $03;
                  mes.Code:= {R8_AP_DOORNOCLOSED} SUD_HELD;
                  st:= Format('Удержание двери ТД #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;

                $606://Взлом (!)
                begin
                  State:= $04;
                  mes.Code:= {R8_AP_DOORALARM} SUD_FORCED;
                  st:= Format('Взлом двери ТД #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $607://Закрывание двери
                begin
                  State:= $01;
                  mes.Code:= R8_AP_DOORCLOSE;
                  st:= Format('Закрывание двери ТД #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                $608://Блокирование (!)
                begin
                  State:= $05;
                  mes.Code:= {R8_AP_BLOCKING} RIC_MODE;
                  mes.Level:= APModeToRostek(ptc);
                  mes.Partion:= APStateToRostek(ptc);
                  st:= Format('Блокирование ТД #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $609://Разблокирование (!)
                begin
                  State:= $06;
                  mes.Code:= {R8_AP_DEBLOCKING} RIC_MODE;
                  mes.Level:= APModeToRostek(ptc);
                  mes.Partion:= APStateToRostek(ptc);
                  st:= Format('Разблокирование ТД #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $60A://Выход по кнопке (!)
                begin
                  State:= $01;
                  mes.Code:= {R8_AP_EXITBUTTON} SUD_GRANTED_BUTTON;
                  st:= Format('Выход по кнопке ТД #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;

                $60B://Восстановление (сброс)
                begin
                  mes.Code:= ApEventAfterReset(State);

                  case mes.Code of
                    RIC_MODE:
                    begin
                      State:= $01;
                      st:= Format('Сброс (Режим норма) ТД #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                    end;
                    SUD_RESETHELD:
                    begin
                      State:= $01;
                      st:= Format('Сброс (Отбой удержания) ТД #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                    end;
                    SUD_RESETFORCED:
                    begin
                      State:= $01;
                      st:= Format('Сброс (Отбой взлома) ТД #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                    end;
                    else
                      st:= Format('Сброс (БЕЗ ОТПРАВКИ) ТД #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                  end;//case

                  if ptc<>nil then
                  begin
                    mes.Level:= APModeToRostek(ptc);
                    mes.Partion:= APStateToRostek(ptc);
                  end;
                end;

                $60C://Ошибка авторизации
                begin
                  State:= $01;
                  mes.Code:= R8_AP_AUTHORIZATIONERROR;
                  if Prm=0 then
                  begin
                    mes.Code:= SUD_NO_CARD;
                    st:= Format('Нет карты в БЦП. ТД #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                  end
                  else
                  begin
                    mes.Code:= SUD_BAD_PIN;
                    st:= Format('Доступ запрещен. Неверный пинкод. ТД #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                  end;
                end;
                $60D://подбор (!)
                begin
                  State:= $01;
                  mes.Code:= {R8_AP_CODEFORGERY} SUD_ACCESS_CHOOSE;
                  st:= Format('Попытка подбора кода. ТД #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $60E://Запрос прохода
                begin
                  State:= $01;
                  mes.Code:= R8_AP_REQUESTPASS;
                  st:= Format('Запрос прохода. ТД #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $60F://Нападение
                begin
                  State:= $07;
                  mes.Code:= R8_AP_FORCING;
                  st:= Format('Нападение. ТД #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $610://Нарушение правил прохода
                begin
                  State:= $01;
                  mes.Code:= {R8_AP_APBERROR} SUD_BAD_APB;
                  st:= Format('Нарушение правил прохода. ТД #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $611://Доступ разрешен
                begin
                  State:= $01;
                  mes.Code:= {R8_AP_ACCESSGRANTED} SUD_ACCESS_GRANTED;
                  st:= Format('Доступ разрешен. ТД #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $612://Таймаут
                begin
                  State:= $01;
                  mes.Code:= R8_AP_ACCESSTIMEOUT;
                  st:= Format('Таймаут ТД #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                end;
                //терминал (связь-резерв -неисправность-тревога-откр-готовность) с-х-х-х-вкл-х
                $701: //Запрос пользователя
                begin
                  mes.Code:= R8_TERM_REQUEST;
                  st:= Format('Запрос пользователя. ТЕРМИНАЛА #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $702: //Блокирование работы терминала
                begin
                  State:= State or $02;
                  mes.Code:= R8_TERM_BLOCKING;
                  st:= Format('Блокирование ТЕРМИНАЛА #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $703: //Ошибка авторизации пользователя
                begin
                  mes.Code:= R8_TERM_AUTHORIZATIONERROR;
                  st:= Format('Ошибка авторизации пользователя. ТЕРМИНАЛ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $704: //Попытка подбора кода. Событие выдается после трех, сделанных подряд, ошибок авто-ризации пользователя.
                begin
                  State:= State or $04;
                  mes.Code:= R8_TERM_CODEFORGERY;
                  st:= Format('Попытка подбора кода. ТЕРМИНАЛ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $705: //Восстановление работы терминала после блокирования
                begin
                  State:= State and $f1;
                  mes.Code:= R8_TERM_RESET;
                  st:= Format('Восстановление работы после блокирования. ТЕРМИНАЛ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $706: //Пользовательская команда
                begin
                  mes.Code:= R8_TERM_USERCOMMAND;
                  st:= Format('Пользовательская команда. ТЕРМИНАЛ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $801:
                begin
                  st:= Format('Вход. Вход пользователя через шлюз, в зону шлюза. ШЛЮЗ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $802:
                begin
                  st:= Format('Выход. Выход пользователя через шлюз, из зоны шлюза. ШЛЮЗ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $803:
                begin
                  st:= Format('Вход в шлюз. Вход пользователя в шлюзовую кабину. ШЛЮЗ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $805:
                begin
                  st:= Format('Проход разрешен в первую дверь шлюза. Разрешение прохода командой «Открыть замок1». ШЛЮЗ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $806:
                begin
                  st:= Format('Проход разрешен во вторую дверь шлюза.Разрешение прохода командой «Открыть замок 2». ШЛЮЗ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $807:
                begin
                  st:= Format('Открывание двери. ШЛЮЗ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $808:
                begin
                  st:= Format('Удержание двери. ШЛЮЗ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $809:
                begin
                  st:= Format('Взлом двери. ШЛЮЗ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $80A:
                begin
                  st:= Format('Закрывание двери. ШЛЮЗ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $80B:
                begin
                  st:= Format('Блокирование шлюза. ШЛЮЗ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $80C:
                begin
                  st:= Format('Разблокирование шлюза. ШЛЮЗ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $80D:
                begin
                  st:= Format('Восстановление работы. ШЛЮЗ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $80E:
                begin
                  st:= Format('Ошибка авторизации пользователя. ШЛЮЗ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $80F:
                begin
                  st:= Format('Попытка подбора кода. ШЛЮЗ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $810:
                begin
                  st:= Format('Таймаут шлюза. ШЛЮЗ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $811:
                begin
                  st:= Format('Срабатывание тревожного входа шлюза. ШЛЮЗ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $812:
                begin
                  st:= Format('Нарушение правил прохода. ШЛЮЗ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $813:
                begin
                  st:= Format('Доступ разрешен. ШЛЮЗ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $814:
                begin
                  st:= Format('Таймаут. ШЛЮЗ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;

                $901:
                begin
                  State:= State or $02;
                  mes.Code:= R8_ASPT_AUTOMATICON;
                  st:= Format('Автоматика включена. АСПТ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $902:
                begin
                  State:= State and $fd;
                  mes.Code:= R8_ASPT_AUTOMATICOFF;
                  st:= Format('Автоматика отключена. АСПТ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $903:
                begin
                  State:= State and $fe;
                  mes.Code:= R8_ASPT_DOOROPEN;
                  st:= Format('Открывание двери. АСПТ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $904:
                begin
                  State:= State or $01;
                  mes.Code:= R8_ASPT_DOORCLOSE;
                  st:= Format('Закрывание двери. АСПТ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $905:
                begin
                  State:= State or $04;
                  mes.Code:= R8_ASPT_AUTOMATICSTART;
                  st:= Format('Автоматический пуск. АСПТ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $906:
                begin
                  State:= State or $04;
                  mes.Code:= R8_ASPT_REMOTESTART;
                  st:= Format('Дистанционный пуск. АСПТ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $907:
                begin
                  State:= State or $04;
                  mes.Code:= R8_ASPT_MANUALSTART;
                  st:= Format('Ручной пуск. АСПТ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $908:
                begin
                  State:= State and $fb;
                  mes.Code:= R8_ASPT_CANCELSTART;
                  st:= Format('Отмена пуска. АСПТ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $909:
                begin
                  State:= State or $04;
                  mes.Code:= R8_ASPT_EVACUATIONDELAY;
                  st:= Format('Задержка на эвакуацию. АСПТ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $90A:
                begin
                  State:= State or $04;
                  mes.Code:= R8_ASPT_FIREEXTINGUISHING;
                  st:= Format('Пуск ОТВ. АСПТ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $90B:
                begin
                  mes.Code:= R8_ASPT_FIREEXTINGUISHINGCOMPLETE;
                  st:= Format('Пуск прошел. АСПТ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $90C:
                begin
                  mes.Code:= R8_ASPT_AUTHORIZATIONERROR;
                  st:= Format('Ошибка авторизации пользователя. АСПТ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $90D:
                begin
                  mes.Code:= R8_ASPT_TIMEOUT;
                  st:= Format('Таймаут. АСПТ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $90E:
                begin
                  mes.Code:= R8_ASPT_OUTLAUNCHSUCCESS;
                  st:= Format('Срабатывание выхода СКУП-01. АСПТ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $90F:
                begin
                  State:= State or $08;
                  mes.Code:= R8_ASPT_OUTLAUNCHERROR;
                  st:= Format('Ошибка срабатывания выхода СКУП-01. АСПТ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $910:
                begin
                  State:= State or $08;
                  mes.Code:= R8_ASPT_TROUBLE;
                  st:= Format('Неисправность. АСПТ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $911:
                begin
                  mes.Code:= R8_ASPT_SDU;
                  st:= Format('Срабатывание СДУ. АСПТ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $912:
                begin
                  mes.Code:= R8_ASPT_WEIGHTSENSOR;
                  st:= Format('Срабатывание датчика наличия ОТВ. АСПТ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $913:
                begin
                  State:= State or $f6;
                  mes.Code:= R8_ASPT_RESET;
                  st:= Format('Сброс. АСПТ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $914:
                begin
                  State:= State or $04;
                  mes.Code:= R8_ASPT_FIRE;
                  st:= Format('Пожар. АСПТ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;


                $A01:
                begin
                  State:= State or $04;
                  mes.Code:= R8_VIDEO_ARM;
                  st:= Format('Постановка на охрану. ВИДЕО #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $A02:
                begin
                  State:= State or $04;
                  mes.Code:= R8_VIDEO_DISARM;
                  st:= Format('Снятие с охраны. ВИДЕО #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $A03:
                begin
                  State:= State or $04;
                  mes.Code:= R8_VIDEO_ALARM;
                  st:= Format('Тревога. ВИДЕО #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $A04:
                begin
                  State:= State or $04;
                  mes.Code:= R8_VIDEO_TROUBLE;
                  st:= Format('Неисправность. ВИДЕО #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $A05:
                begin
                  State:= State or $04;
                  mes.Code:= R8_VIDEO_STARTRECORD;
                  st:= Format('Начало записи. ВИДЕО #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;
                $A06:
                begin
                  State:= State or $04;
                  mes.Code:= R8_VIDEO_STOPRECORD;
                  st:= Format('Конец записи. ВИДЕО #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                end;


                $8301: //-т Восстановление нормального состояния ТС, т.е. исключение ТС из тревожного списка БЦП
                begin
                  case Kind of
                    0:
                    begin
                      mes.TypeDevice:= 4;
                      State:= State and $03;
                      mes.Code:= R8_TC_RESTORE;
                      st:= Format('Восстановлен ТС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                    end;
                    1..4:
                    begin
                      mes.TypeDevice:= 5;
                      State:= State and $03;
                      mes.Code:= R8_SH_RESTORE;
                      st:= Format('Восстановлен ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                    end;
                    5:
                    begin
                      mes.TypeDevice:= 7;
                      State:= State and $03;
                      mes.Code:= R8_RELAY_RESTORE;
                      st:= Format('Восстановлен РЕЛЕ #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                    end;
                    6:
                    begin
                      mes.TypeDevice:= 2;
                      State:= $01;
                      mes.Code:= R8_AP_RESTORE;
                      st:= Format('Восстановлена ТД #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                    end;
                    7:
                    begin
                      mes.TypeDevice:= 8;
                      State:= State and $03;
                      mes.Code:= R8_TERM_RESTORE;
                      st:= Format('Восстановлен ТЕРМИНАЛ #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                    end;
                    9:
                    begin
                      mes.TypeDevice:= 12;
                      State:= State and $0f;
                      mes.Code:= R8_ASPT_RESTORE;
                      st:= Format('Восстановлен АСПТ #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                    end;
                  end;
                end;

                $8302: //+т Неисправность оборудования ТС. Данное событие генерируется при переходе оборудования, с которым связан объект ТС, в состояние, не обеспечивающее нормальное функционирование ТС.
                begin
                  State:= State or $08;
                  case Kind of
                    0:
                    begin
                      mes.TypeDevice:= 4;
                      st:= Format('Неисправно оборудование ТС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_TC_HW_FAULT;
                    end;
                    1..4:
                    begin
                      mes.TypeDevice:= 5;
                      st:= Format('Неисправно оборудование ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_SH_HW_FAULT;
                    end;
                    5:
                    begin
                      mes.TypeDevice:= 7;
                      st:= Format('Неисправно оборудование РЕЛЕ #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_RELAY_HW_FAULT;
                    end;
                    6:
                    begin
                      mes.SysDevice:= SYSTEM_SUD;
                      mes.TypeDevice:= 2;
                      st:= Format('Неисправно оборудование ТД #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= {R8_AP_HW_FAULT} SUD_LOST_LINK_READER;
                    end;
                    7:
                    begin
                      mes.TypeDevice:= 8;
                      st:= Format('Неисправно оборудование ТЕРМИНАЛ #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_TERM_HW_FAULT;
                    end;
                    9:
                    begin
                      mes.TypeDevice:= 12;
                      mes.Code:= R8_ASPT_HW_FAULT;
                      st:= Format('Неисправно оборудование АСПТ #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                    end;
                  end;
                end;

                $8303: //-н Восстановление работоспособности оборудования ТС
                begin
                  State:= State and $03; 
                  case Kind of
                    0:
                    begin
                      mes.TypeDevice:= 4;
                      st:= Format('В норме оборудование ТС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_TC_HW_OK;
                    end;
                    1..4:
                    begin
                      mes.TypeDevice:= 5;
                      st:= Format('В норме оборудование ШС #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_SH_HW_OK;
                    end;
                    5:
                    begin
                      mes.TypeDevice:= 7;
                      st:= Format('В норме оборудование РЕЛЕ #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_RELAY_HW_OK;
                    end;
                    6:
                    begin
                      mes.TypeDevice:= 2;
                      st:= Format('В норме оборудование ТД #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= {R8_AP_HW_OK} SUD_SET_LINK_READER;
                    end;
                    7:
                    begin
                      mes.TypeDevice:= 8;
                      st:= Format('В норме оборудование ТЕРМИНАЛ #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_TERM_HW_OK;
                    end;
                    9:
                    begin
                      mes.TypeDevice:= 12;
                      mes.Code:= R8_ASPT_HW_OK;
                      st:= Format('В норме оборудование  АСПТ #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                    end;
                  end;
                end;

                $8304: // нет прав на управление ТС, не поверено !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                begin
                  case Kind of
                    0:
                    begin
                      mes.TypeDevice:= 4;
                      mes.Code:= R8_TC_NORIGTH;
                      st:= Format('Нет прав управления ТС #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                    end;
                    1..4:
                    begin
                      mes.TypeDevice:= 5;
                      mes.Code:= R8_SH_NORIGTH;
                      st:= Format('Нет прав управления ШС #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                    end;
                    5:
                    begin
                      mes.TypeDevice:= 7;
                      mes.Code:= R8_RELAY_NORIGTH;
                      st:= Format('Нет прав управления РЕЛЕ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                    end;
                    6:
                    begin
                      mes.TypeDevice:= 2;
                      mes.Code:= {R8_AP_NORIGTH} SUD_BAD_LEVEL;
                      st:= Format('Нет прав управления ТД #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                    end;
                    7:
                    begin
                      mes.TypeDevice:= 8;
                      mes.Code:= R8_TERM_NORIGTH;
                      st:= Format('Нет прав управления ТЕРМИНАЛ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                    end;
                    9:
                    begin
                      mes.TypeDevice:= 12;
                      mes.Code:= R8_ASPT_NORIGTH;
                      st:= Format('Нет прав управления АСПТ #%d [%.4d]. %s', [Id, Sernum, PrmStr]);
                    end;
                  end;
                end;

                $8380: //Создано ТС
                begin
                  case Kind of
                    0:
                    begin
                      TheKSBParam.WriteIntegerParam(mes, data, 'Номер ШС', Id);
                      st:= Format('Создано TC #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_TC_CREATE;
                    end;
                    1..4:
                    begin
                      TheKSBParam.WriteIntegerParam(mes, data, 'Номер ШС', Id);
                      st:= Format('Создан ШC #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_SH_CREATE;
                    end;
                    5:
                    begin
                      TheKSBParam.WriteIntegerParam(mes, data, 'Номер реле', Id);
                      st:= Format('Создано РЕЛЕ #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_RELAY_CREATE;
                    end;
                    6:
                    begin
                      TheKSBParam.WriteIntegerParam(mes, data, 'Номер ТД', Id);
                      st:= Format('Создана ТД #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_AP_CREATE;
                    end;
                    7:
                    begin
                      TheKSBParam.WriteIntegerParam(mes, data, 'Номер терминала', Id);
                      st:= Format('Создан ТЕРМИНАЛ #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_TERM_CREATE;
                    end;
                    9:
                    begin
                      TheKSBParam.WriteIntegerParam(mes, data, 'Номер АСПТ', Id);
                      st:= Format('Создан АСПТ #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_ASPT_CREATE;
                    end;
                  end;
                end;

                $8381: //Редактировано ТС
                begin
                  case Kind of
                    0:
                    begin
                      TheKSBParam.WriteIntegerParam(mes, data, 'Номер ШС', Id);
                      st:= Format('Редактировано TC #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_TC_CHANGE;
                    end;
                    1..4:
                    begin
                      TheKSBParam.WriteIntegerParam(mes, data, 'Номер ШС', Id);
                      st:= Format('Редактирован ШC #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_SH_CHANGE;
                    end;
                    5:
                    begin
                      TheKSBParam.WriteIntegerParam(mes, data, 'Номер реле', Id);
                      st:= Format('Редактировано РЕЛЕ #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_RELAY_CHANGE;
                    end;
                    6:
                    begin
                      TheKSBParam.WriteIntegerParam(mes, data, 'Номер ТД', Id);
                      st:= Format('Редактирована TД #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_AP_CHANGE;
                    end;
                    7:
                    begin
                      TheKSBParam.WriteIntegerParam(mes, data, 'Номер терминала', Id);
                      st:= Format('Редактирован ТЕРМИНАЛ #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_TERM_CHANGE;
                    end;
                    9:
                    begin
                      TheKSBParam.WriteIntegerParam(mes, data, 'Номер АСПТ', Id);
                      st:= Format('Редактирован АСПТ #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_ASPT_CHANGE;
                    end;
                  end;
                end;

                $8382: //Удалено ТС
                begin
                  case Kind of
                    0:
                    begin
                      TheKSBParam.WriteIntegerParam(mes, data, 'Номер реле', Id);
                      st:= Format('Удалено TC #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_TC_DELETE;
                    end;
                    1..4:
                    begin
                      TheKSBParam.WriteIntegerParam(mes, data, 'Номер ШС', Id);
                      st:= Format('Удален ШC #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_SH_DELETE;
                    end;
                    5:
                    begin
                      TheKSBParam.WriteIntegerParam(mes, data, 'Номер реле', Id);
                      st:= Format('Удалено РЕЛЕ #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_RELAY_DELETE;
                    end;
                    6:
                    begin
                      TheKSBParam.WriteIntegerParam(mes, data, 'Номер ТД', Id);
                      st:= Format('Удалена TД #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_AP_DELETE;
                    end;
                    7:
                    begin
                      TheKSBParam.WriteIntegerParam(mes, data, 'Номер терминала', Id);
                      st:= Format('Удален ТЕРМИНАЛ TC #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_TERM_DELETE;
                    end;
                    9:
                    begin
                      TheKSBParam.WriteIntegerParam(mes, data, 'Номер АСПТ', Id);
                      st:= Format('Удален АСПТ TC #%d [%.4d] %s', [Id, Sernum, PrmStr]);
                      mes.Code:= R8_ASPT_DELETE;
                    end;
                  end;
                end;

                Else
                  UnknownEvent:= rbuf[16*i+9] + 256*rbuf[16*i+10];

              end; //case события ТС

              //
              if ptc<>nil then
              if UnknownEvent=0 then
                ptc^.State:= State;

              //---------------------------------------//
              // окончательное формирование mes для ТС //
              //---------------------------------------//
              case rbuf[16*i+9]+256*rbuf[16*i+10] of
                $1:
                begin
                  case Kind of
                    0: mes.TypeDevice:=4;
                    1..4: mes.TypeDevice:=5;
                    5: mes.TypeDevice:=7;
                    6:
                    begin
                      mes.SysDevice:= SYSTEM_SUD;
                      mes.TypeDevice:= 2;
                    end;
                    7: mes.TypeDevice:=8;
                  end;
                  mes.SmallDevice:= Id;
                end;
                $101..$499:
                begin
                  mes.TypeDevice:= 5;
                  mes.SmallDevice:= Id;
                end;
                $501..$599:
                begin
                  mes.TypeDevice:= 7;
                  mes.SmallDevice:= Id;
                end;
                $601..$699:
                begin
                  mes.SysDevice:= SYSTEM_SUD;
                  mes.TypeDevice:= 2; //считыватель
                  mes.SmallDevice:= Id;
                end;
                $701..$799:
                begin
                  mes.TypeDevice:= 8;
                  mes.SmallDevice:= Id;
                  TheKSBParam.WriteIntegerParam(mes, data, 'Номер пользователя', Prm);
                end;
                $901..$999:
                begin
                  mes.TypeDevice:= 12;
                  mes.SmallDevice:= Id;
                  TheKSBParam.WriteIntegerParam(mes, data, 'Номер пользователя', Prm);
                end;
                $8301..$8304:
                begin
                  case Kind of
                    6:
                    begin
                      mes.SysDevice:= SYSTEM_SUD;
                      mes.TypeDevice:= 2; //считыватель
                    end;
                  end;//case
                  mes.SmallDevice:= Id;
                end;
                $8380..$8382:
                begin
                  mes.TypeDevice:= 4;
                  mes.SmallDevice:= 0;
                  TheKSBParam.WriteIntegerParam(mes, data, 'Номер пользователя', Prm);
                end;
              end;
              
              //
              case mes.Code of
                R8_HANDSHAKE,
                R8_SH_ARMED,
                R8_SH_DISARMED,
                R8_SH_RESTORE,
                R8_TC_RESTORE,
                R8_RELAY_RESTORE,
                R8_RELAY_0,
                R8_RELAY_1,
                R8_TERM_RESTORE,
                R8_SH_BYPASS,
                R8_SH_INDELAY,
                R8_SH_OUTDELAY,
                R8_SH_WAITFORREADY,
                R8_SH_WAITFORREADYCANCEL,
                R8_SH_RESET,
                R8_SH_TEST,
                R8_AP_IN,
                SUD_ACCESS_GRANTED,
                R8_AP_OUT,
                R8_AP_PASSENABLE,
                R8_AP_DOOROPEN,
                R8_AP_DOORCLOSE,
                R8_AP_BLOCKING,
                SUD_DOOR_CLOSE,
                R8_AP_DEBLOCKING,
                SUD_DOOR_OPEN,
                RIC_MODE,
                R8_AP_RESET,
                R8_AP_AUTHORIZATIONERROR,
                R8_AP_REQUESTPASS,
                R8_AP_FORCING,
                R8_AP_APBERROR,
                SUD_BAD_APB,
                R8_AP_ACCESSGRANTED,
                R8_AP_ACCESSTIMEOUT,
                R8_TC_NORIGTH,
                R8_SH_NORIGTH,
                R8_RELAY_NORIGTH,
                SUD_BAD_LEVEL,
                R8_TERM_NORIGTH,
                //
                R8_ZONE_CREATE,
                R8_ZONE_CHANGE,
                R8_ZONE_DELETE,
                //
                R8_TC_CREATE,
                R8_TC_CHANGE,
                R8_TC_DELETE,
                R8_SH_CREATE,
                R8_SH_CHANGE,
                R8_SH_DELETE,
                R8_RELAY_CREATE,
                R8_RELAY_CHANGE,
                R8_RELAY_DELETE,
                R8_AP_CREATE,
                R8_AP_CHANGE,
                R8_AP_DELETE,
                R8_TERM_CREATE,
                R8_TERM_CHANGE,
                R8_TERM_DELETE,
                //
                R8_ASPT_AUTOMATICON,
                R8_ASPT_AUTOMATICOFF,
                R8_ASPT_AUTOMATICSTART,
                R8_ASPT_REMOTESTART,
                R8_ASPT_MANUALSTART,
                R8_ASPT_CANCELSTART,
                R8_ASPT_CREATE,
                R8_ASPT_CHANGE,
                R8_ASPT_DELETE:
                  TheKSBParam.WriteIntegerParam(mes, data, 'Номер пользователя', Prm);
              end;

              {
              if ptc<>nil then
              if UnknownEvent=0 then  // прокрадывается херня в ptc^.tempUser ПОРОЙ
              }

              {correction zero user}
              if ptc<>nil then
              case mes.Code of
                R8_SH_ARMED,
                R8_SH_DISARMED,
                R8_SH_RESTORE:
                begin
                  ptc^.tempUser:= Prm; // только здесь определяется tempUser
                  UpdateTcUser(ptc);
                  if ptc^.tempUser>0 then
                  begin
                    st:= st + ' > ' + IntToStr(ptc^.tempUser);
                    TheKSBParam.WriteIntegerParam(mes, data, 'Номер пользователя', ptc^.tempUser);
                  end;
                end;
              end;

              {пересчет зоны с пользователем}
              if (ptc<>nil) and (UnknownEvent=0) then     // прокрадывается херня ptc^.tempUser
              case mes.Code of
                R8_SH_ARMED,
                R8_SH_DISARMED,
                R8_SH_RESTORE:
                  CalcStateZN(ptc^.ZoneNumber, rbuf[16*i+11], Prm, ptc^.tempUser);
                else CalcStateZN(ptc^.ZoneNumber, rbuf[16*i+11], 0, 0);
              end;

              case mes.Code of
                R8_AP_IN,
                SUD_ACCESS_GRANTED,
                R8_AP_OUT,
                R8_AP_PASSENABLE,
                R8_AP_DOOROPEN,
                R8_AP_DOORCLOSE,
                R8_AP_BLOCKING,
                SUD_DOOR_CLOSE,
                R8_AP_DEBLOCKING,
                SUD_DOOR_OPEN,
                R8_AP_RESET,
                R8_AP_AUTHORIZATIONERROR,
                R8_AP_REQUESTPASS,
                R8_AP_FORCING,
                R8_AP_APBERROR,
                SUD_BAD_APB,
                R8_AP_ACCESSGRANTED,
                R8_AP_ACCESSTIMEOUT,
                R8_AP_NORIGTH,
                SUD_BAD_LEVEL,
                SUD_BAD_PIN:
                  TheKSBParam.WriteIntegerParam(mes, data, 'Номер карты', Prm);
              end;

              case mes.Code of
                SUD_ACCESS_CHOOSE:
                  TheKSBParam.WriteIntegerParam(mes, data, 'Номер карты', Prm);
              end;

            end; //2:ТС


            3://Оборудование-железо (по умолчанию панель)
            begin
              CuNumber:= rbuf[16*i+6] + 256*rbuf[16*i+7] + 65536*rbuf[16*i+5];
              CuName:= Format('%s #%d',[ HWTypeToStr(rbuf[16*i+5]), rbuf[16*i+6] + 256*rbuf[16*i+7] ]);

              pcu:= rub.FindCU(CuNumber, 0);
              if pcu<>nil then
                State:= pcu^.State;

              Id:= rub.FindIdCU(CuNumber);
              if Id=0 then
                Id:= rub.SetIdCU(CuNumber);

              mes.TypeDevice:= 9;
              mes.SmallDevice:= Id;
              if rbuf[16*i+11] in [1,7,8,10] then
              begin
                mes.TypeDevice:= 4;
                TheKSBParam.WriteIntegerParam(mes, data, 'Номер СУ', Id);
                TheKSBParam.WriteIntegerParam(mes, data, 'Номер пользователя', Prm);
              end;
              //

              case rbuf[16*i+9]+256*rbuf[16*i+10] of
                1: //квитирование
                begin
                  st:= Format('%s нажал "Принять" СУ #%d [%s]', [PrmStr, Id, CuName] );
                  mes.Code:= R8_HANDSHAKE;
                end;
                $101..$a99:
                begin
                  st:= Format(
                    'Событие(%d) элемента СУ #%d [%s], не связанного с ТС. %s',
                    [ rbuf[16*i+9] + 256*rbuf[16*i+10], Id, CuName, PrmStr ] );
                end;

                $2001:
                begin
                  State:= State and $FE;
                  st:= Format('Потеря связи с СУ #%d [%s] %s', [Id, CuName, PrmStr]);
                  mes.Code:= R8_CU_CONNECT_OFF;
                  {
                  for j:=1 to rub.TC.Count do
                  begin
                    ptc:=rub.TC.Items[j-1];
                    mes.SmallDevice:=ptc^.Number;
                    if (65536*ptc^.HWType+ptc^.HWSerial)<>(65536*rbuf[16*i+5]+rbuf[16*i+6]+256*rbuf[16*i+7]) then continue;
                    case ptc^.Kind of
                      1..4: begin mes.TypeDevice:=5; mes.Code:= R8_SH_CONNECT_OFF; end;
                      5:    begin mes.TypeDevice:=7; mes.Code:= R8_RELAY_CONNECT_OFF; end;
                      6:    begin mes.TypeDevice:=2; mes.Code:= R8_AP_CONNECT_OFF; end;
                      7:    begin mes.TypeDevice:=8; mes.Code:= R8_TERM_CONNECT_OFF; end;
                      else continue;
                    end;
                    ptc^.State:=ptc^.State and $df;
                    Send(mes);
                  end;
                  }
                end;
                $2002:
                begin
                  State:= State or 1;
                  st:= Format('Восстановление связи с СУ #%d [%s] %s', [Id, CuName, PrmStr]);
                  mes.Code:= R8_CU_CONNECT_ON;
                  {
                  for j:=1 to rub.TC.Count do
                  begin
                    ptc:=rub.TC.Items[j-1];
                    mes.SmallDevice:=ptc^.Number;
                    if (65536*ptc^.HWType+ptc^.HWSerial)<>(65536*rbuf[16*i+5]+rbuf[16*i+6]+256*rbuf[16*i+7]) then continue;
                    case ptc^.Kind of
                      1..4: begin mes.TypeDevice:=5; mes.Code:=R8_SH_CONNECT_ON; end;
                      5:    begin mes.TypeDevice:=7; mes.Code:=R8_RELAY_CONNECT_ON; end;
                      6:    begin mes.TypeDevice:=2; mes.Code:=R8_AP_CONNECT_ON; end;
                      7:    begin mes.TypeDevice:=8; mes.Code:=R8_TERM_CONNECT_ON; end;
                      else continue;
                    end;
                    ptc^.State:=ptc^.State or 20;
                    Send(mes);
                  end;
                  }
                end;

                $2003:
                if pcu=nil then
                begin
                  st:= Format('Вскрытие БЦП %s', [PrmStr]);
                  mes.Code:= R8_BCP_OPEN;
                end
                else
                begin
                  st:= Format('Вскрытие СУ #%d [%s] %s', [Id, CuName, PrmStr]);
                  mes.Code:= R8_CU_OPEN;
                end;

                $2101:
                begin
                  st:= Format('Включение БЦП %s', [PrmStr]);
                  mes.Code:= R8_POWER_UP;
                end;
                $2102:
                begin
                  st:= Format('Выключение БЦП %s', [PrmStr]);
                  mes.Code:= R8_POWER_DOWN;
                end;
                $2103:
                begin
                  st:= Format('Начало сессии БЦП. %s', [PrmStr]);
                  mes.Code:= R8_USER_ENTER;
                end;
                $2104:
                begin
                  st:= Format('Конец сессии БЦП. %s', [PrmStr]);
                  mes.Code:= R8_USER_EXIT;
                end;
                $2105:
                begin
                  st:= Format('Вход в режим конфигурирования. %s', [PrmStr]);
                  mes.Code:= R8_ENTER_CONF;
                end;
                $2106:
                begin
                  st:= Format('Ошибка авторизации оператора. %s', [PrmStr]);
                  mes.Code:= R8_UNKNOWN_USER;
                end;
                $2107:
                begin
                  st:= Format('Блокировка клавиатуры БЦП при авторизации. %s', [PrmStr]);
                  mes.Code:= R8_LOCK_KEYBOARD;
                end;
                $2108:
                begin
                  st:= Format('%s (%s)', [PrmStr, HWTypeBCPError(Prm)]);
                  rub.ErrorCode:= Prm;
                  mes.Level:= rub.ErrorCode;
                  mes.Code:= R8_SYSERROR;
                end;
                $2109:
                begin
                  st:= Format('Вскрытие корпуса БЦП %s', [PrmStr]);
                  mes.Code:= R8_OPEN;
                end;
                $210A:
                begin
                  st:= Format('Коррекция часов БЦП %s', [PrmStr]);
                  mes.Code:= R8_SETTIME;
                end;
                $210B:
                begin
                  st:= Format('Потеря связи с ПЭВМ. %s', [PrmStr]);
                  mes.Code:= R8_PCCONNECT_OFF;
                end;
                $210C:
                begin
                  st:= Format('Восстановление связи с ПЭВМ. %s', [PrmStr]);
                  mes.Code:= R8_PCCONNECT_ON;
                end;
                $210D:
                begin
                  st:= Format('БЦП. Переход на резервное питание %s', [PrmStr]);
                  mes.Code:= R8_RESERV_POWER;
                end;
                $210E:
                begin
                  st:= Format('БЦП. Восстановление сетевого питания %s', [PrmStr]);
                  mes.Code:= R8_NORMAL_POWER;
                end;
                $210F:
                begin
                  st:= Format('Разряд БА %s', [PrmStr]);
                  mes.Code:= R8_BAT_LOW;
                end;
                $2110:
                begin
                  st:= Format('Восстановление БА %s', [PrmStr]);
                  mes.Code:= R8_BAT_NORMAL;
                end;
                $2117:
                begin
                  st:= Format('Возврат к заводским установкам. %s', [PrmStr]);
                  mes.Code:= R8_WORKSETTINGS;
                end;
                $2118:
                begin
                  st:= Format('Синхронизация часов БЦП. %s', [PrmStr]);
                  mes.Code:= R8_SYNC_TIME;
                end;
                $2126:
                begin
                  st:= Format('Сброс БЦП. %s', [PrmStr]);
                  mes.Code:= R8_RESET;
                end;
                $2127:
                begin
                  st:= Format('Заводское тестирование. %s', [PrmStr]);
                  mes.Code:= R8_SELFTEST;
                end;
                $2128:
                begin
                  st:= Format('Сброс системных ошибок БЦП. %s', [PrmStr]);
                  rub.ErrorCode:= $FF;
                  mes.Code:= R8_OK;
                end;
                $2119:
                begin
                  st:= Format('Специальное событие БЦП. %s', [PrmStr]);
                end;
                $211A:
                begin
                  st:= Format('Сброс APB всех пользователей. %s', [PrmStr]);
                  mes.Code:= R8_BCP_ALLUSERSETSTATE;
                end;
                $211B:
                begin
                  st:= Format('Установка состояния для всех пользователей. %s', [PrmStr]);
                end;
                $211C:
                begin
                  st:= Format('Включение АК оператором. %s', [PrmStr]);
                end;
                $211D:
                begin
                  st:= Format('Включение АК по тревоге. %s', [PrmStr]);
                end;
                $211E:
                begin
                  st:= Format('Включение АК по времени доклада с постов. %s', [PrmStr]);
                end;
                $211F:
                begin
                  st:= Format('Включение АК по тональному сигналу. %s', [PrmStr]);
                end;

                $2120:
                begin
                  st:= Format('Выключение АК. %s', [PrmStr]);
                end;
                $2121:
                begin
                  st:= Format('Тональный сигнал. %s', [PrmStr]);
                end;
                $2122:
                begin
                  st:= Format('Подключение ПУ-04. %s', [PrmStr]);
                end;
                $2123:
                begin
                  st:= Format('Отключение ПУ-04. %s', [PrmStr]);
                end;
                $2129:
                begin
                  st:= Format('Потеря связи с сетевым БЦП. %s', [PrmStr]);
                end;
                $212A:
                begin
                  st:= Format('Восстановление связи с сетевым БЦП. %s', [PrmStr]);
                end;

                $2501:
                begin
                  st:= Format('Вскрытие корпуса ИБП #%d [%s] %s', [Id, CuName, PrmStr]);
                  mes.Code:=R8_UPS_ACCESS;
                end;
                $2502:
                begin
                  st:= Format('Неисправность выхода 1 ИБП #%d [%s] %s', [Id, CuName, PrmStr]);
                  mes.Code:= R8_UPS_OUT1_BAD;
                end;
                $2503:
                begin
                  st:= Format('Восстановление выхода 1 ИБП #%d [%s] %s', [Id, CuName, PrmStr]);
                  mes.Code:= R8_UPS_OUT1_OK;
                end;
                $2504:
                begin
                  st:= Format('Неисправность выхода 2 ИБП #%d [%s] %s', [Id, CuName, PrmStr]);
                  mes.Code:= R8_UPS_OUT2_BAD;
                end;
                $2505:
                begin
                  st:= Format('Восстановление выхода 2 ИБП #%d [%s] %s', [Id, CuName, PrmStr]);
                  mes.Code:= R8_UPS_OUT2_OK;
                end;
                $2506:
                begin
                  st:= Format('Неисправность входа 220 ИБП #%d [%s] %s', [Id, CuName, PrmStr]);
                  mes.Code:= R8_UPS_IN220_BAD;
                end;
                $2507:
                begin
                  st:= Format('Восстановление входа 220 ИБП #%d [%s] %s', [Id, CuName, PrmStr]);
                  mes.Code:= R8_UPS_IN220_OK;
                end;
                $2508:
                begin
                  st:= Format('Разряд БА ИБП #%d [%s] %s', [Id, CuName, PrmStr]);
                  mes.Code:= R8_UPS_BAT_BAD;
                end;
                $2509:
                begin
                  st:= Format('Заряд в норме БА ИБП #%d [%s] %s', [Id, CuName, PrmStr]);
                  mes.Code:= R8_UPS_BAT_OK;
                end;
                $250A:
                begin
                  st:= Format('Переход на резерв ИБП #%d [%s] %s', [Id, CuName, PrmStr]);;
                  mes.Code:= R8_UPS_RESERV_ON;
                end;
                $250B:
                begin
                  st:= Format('Воостановление питания 220 ИБП #%d [%s] %s', [Id, CuName, PrmStr]);
                  mes.Code:= R8_UPS_RESERV_OFF;
                end;
                $250C:
                begin
                  st:= Format('Отключение БА ИБП #%d [%s] %s', [Id, CuName, PrmStr]);
                  mes.Code:= R8_UPS_BAT_DISCONNECT;
                end;
                $250D:
                begin
                  st:= Format('Подключение БА ИБП #%d [%s] %s', [Id, CuName, PrmStr]);
                  mes.Code:= R8_UPS_BAT_CONNECT;
                end;

                $2201,
                $2301,
                $2401,
                $2601,
                $2701,
                $2901,
                $320B:
                begin
                  st:= Format('Вскрытие СУ #%d [%s] %s', [Id, CuName, PrmStr]);
                  mes.Code:= R8_CU_OPEN;
                end;


                $2602:
                begin
                  st:= Format('Шунтирование линии связи с ЛБ #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $2603:
                begin
                  st:= Format('КЗ линии связи с ЛБ #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $2604:
                begin
                  st:= Format('Восстановление линии связи с ЛБ #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $2A01:
                begin
                  st:= Format('Подтверждение оператора БИС #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $2F01:
                begin
                  st:= Format('Принято #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $2F02:
                begin
                  st:= Format('Управление заблокировано #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $2F03:
                begin
                  st:= Format('Управление разблокировано #%d [%s] %s', [Id, CuName, PrmStr]);
                end;

                $3201:
                begin
                  st:= Format('Включение питания #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $3202:
                begin
                  st:= Format('Выключение питания #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $3203:
                begin
                  st:= Format('Вход в режим конфигурирования #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $3204:
                begin
                  st:= Format('Выход из режима конфигурирования #%d [%s] %s', [Id, CuName, PrmStr]);
                end;

                $3205:
                begin
                  st:= Format('Ошибка авторизации #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $3206:
                begin
                  st:= Format('Блокировка клавиатуры #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $3207:
                begin
                  st:= Format('Блокировка управления #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $3208:
                begin
                  st:= Format('Отмена блокировки клавиатуры #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $3209:
                begin
                  st:= Format('Отмена блокировки управления #%d [%s] %s', [Id, CuName, PrmStr]);
                end;

                $320A:
                begin
                  st:= Format('Системная ошибка #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $320C:
                begin
                  st:= Format('Изменение часов реального времени #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $320D:
                begin
                  st:= Format('Переход на резервное питание #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $320E:
                begin
                  st:= Format('Восстановление сетевого питания #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $320F:
                begin
                  st:= Format('Разряд БА #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $3210:
                begin
                  st:= Format('БА в норме #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $3211:
                begin
                  st:= Format('Возврат к заводским установкам #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $3212:
                begin
                  st:= Format('Вход в режим самотестирования #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $3213:
                begin
                  st:= Format('Выход из режима самотестирования #%d [%s] %s', [Id, CuName, PrmStr]);
                end;

                $2E01:
                begin
                  st:= Format('Шунтирование линии связи #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $2E02:
                begin
                  st:= Format('КЗ линии связи #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $2E03:
                begin
                  st:= Format('Восстановление линии связи #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $2E04:
                begin
                  st:= Format('Обрыв линии связи #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $2E05:
                begin
                  st:= Format('Вход в режим проверки извещателей #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $2E06:
                begin
                  st:= Format('Выход из режима проверки извещателей #%d [%s] %s', [Id, CuName, PrmStr]);
                end;

                $3501:
                begin
                  st:= Format('КЗ адресного шлейфа #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $3502:
                begin
                  st:= Format('Восстановление адресного шлейфа #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $3503:
                begin
                  st:= Format('Обрыв адресного шлейфа #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $3601:
                begin
                  st:= Format('Контроль #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                $3602:
                begin
                  st:= Format('Ошибка контроля #%d [%s] %s', [Id, CuName, PrmStr]);
                end;
                
                $8480:
                begin
                  st:= Format('Создано СУ #%d [%s]. %s', [Id, CuName, PrmStr]);
                  mes.Code:= R8_CU_CREATE;
                end;
                $8481 {, $8381}:
                begin
                  st:= Format('Редактировано СУ #%d [%s]. %s', [Id, CuName, PrmStr]);
                  mes.Code:= R8_CU_CHANGE;
                end;
                $8482:
                begin
                  st:= Format('Удалено СУ #%d [%s]. %s', [Id, CuName, PrmStr]);
                  mes.Code:= R8_CU_DELETE;
                end;

                Else
                  UnknownEvent:= rbuf[16*i+9] + 256*rbuf[16*i+10];
              end; //case события СУ

              if (pcu<>nil)and(UnknownEvent=0) then
                pcu^.State:= State;
            end; //3:


            4://Пользователь
            begin
              Id:= rbuf[16*i+5] + 256*rbuf[16*i+6];
              Card:= False;
              pus:= rub.FindUS(Id);
              if (pus<>nil) then
                if (pus^.Id = (pus^.IdentifierCode[1] + pus^.IdentifierCode[2]*256)) then
                  Card:= True;

              mes.TypeDevice:= 4;

              case rbuf[16*i+9]+256*rbuf[16*i+10] of
                $8501:
                begin
                  st:= Format('Сброс APB пользователя #%d. %s', [Id, PrmStr]);
                  mes.Code:= R8_USER_APBRESET;
                end;
                $8502:
                begin
                  st:= Format('Блокирование пользователя #%d. %s', [Id, PrmStr]);
                  mes.Code:= R8_USER_BLOCKING;
                end;
                $8503:
                begin
                  st:= Format('Разблокирование пользователя #%d. %s', [Id, PrmStr]);
                  mes.Code:= R8_USER_DEBLOCKING;
                end;
                $8580:
                  if Card then
                  begin
                    st:= Format('Добавлена карта #%d. %s', [Id, PrmStr]);
                    mes.Level:= pus^.AL1;
                    mes.Code:= SUD_ADDED_CARD;
                  end
                  else
                  begin
                    st:= Format('Создан пользователь #%d. %s', [Id, PrmStr]);
                    mes.Code:= R8_USER_CREATE;
                  end;
                $8581:
                  if Card then
                  begin
                    st:= Format('Добавлена карта #%d. %s', [Id, PrmStr]);
                    mes.Level:= pus^.AL1;
                    mes.Code:= SUD_ADDED_CARD;
                  end
                  else
                  begin
                    st:= Format('Редактирован пользователь #%d. %s', [Id, PrmStr]);
                    mes.Code:= R8_USER_CHANGE;
                  end;
                $8582:
                  if Card then
                  begin
                    st:= Format('Удалена карта #%d. %s', [Id, PrmStr]);
                    mes.Level:= pus^.AL1;
                    mes.Code:= SUD_DELETED_CARD;
                  end
                  else
                  begin
                    st:= Format('Удален пользователь #%d. %s', [Id, PrmStr]);
                    mes.Code:= R8_USER_DELETE;
                  end;

                Else
                  UnknownEvent:= rbuf[16*i+9] + 256*rbuf[16*i+10];

              end; //события Users

              //-----------------------------------------//
              // окончательное формирование mes для User //
              //-----------------------------------------//
              case mes.Code of
                R8_USER_CREATE,
                R8_USER_CHANGE,
                R8_USER_DELETE:
                  TheKSBParam.WriteIntegerParam(mes, data, 'Номер пользователя', Id);
                SUD_ADDED_CARD,
                SUD_DELETED_CARD,
                R8_USER_APBRESET,
                R8_USER_BLOCKING,
                R8_USER_DEBLOCKING:
                begin
                  TheKSBParam.WriteIntegerParam(mes, data, 'Номер карты', Id);
                  TheKSBParam.WriteIntegerParam(mes, data, 'Номер пользователя', Id);
                  mes.SysDevice:= SYSTEM_SUD;
                  mes.TypeDevice:= 1; //контроллер доступа
                end;
              end;
              //
            end; //4:


            9: //Группы
            begin
              Id:= rbuf[16*i+5];
              //pgr:= rub.FindGR(Id);
              mes.TypeDevice:= 4;
              TheKSBParam.WriteIntegerParam(mes, data, 'Номер группы', Id);
              TheKSBParam.WriteIntegerParam(mes, data, 'Номер пользователя', Prm);

              case rbuf[16*i+9]+256*rbuf[16*i+10] of
                $8880:
                begin
                  st:= Format('Создана группа #%d. %s', [Id, PrmStr]);
                  mes.Code:= R8_GR_CREATE;
                end;
                $8881:
                begin
                  st:= Format('Редактирована группа #%d. %s', [Id, PrmStr]);
                  mes.Code:= R8_GR_CHANGE;
                end;
                $8882:
                begin
                  st:= Format('Удалена группа #%d. %s', [Id, PrmStr]);
                  mes.Code:= R8_GR_DELETE;
                end;

                Else
                  UnknownEvent:= rbuf[16*i+9] + 256*rbuf[16*i+10];
              end; //case события Группы

            end;


            10:// ВЗ
            begin
              //pti:= rub.FindTI(rbuf[16*i+5], 1);
              mes.TypeDevice:= 4;
              Id:= rbuf[16*i+5];
              TheKSBParam.WriteIntegerParam(mes, data, 'Номер ВЗ', Id);
              TheKSBParam.WriteIntegerParam(mes, data, 'Номер пользователя', Prm);

              case rbuf[16*i+9]+256*rbuf[16*i+10] of
                $8980:
                begin
                  st:= Format('Создана ВЗ #%d. %s', [Id, PrmStr]);
                  mes.Code:= R8_TZ_CREATE;
                end;
                $8981:
                begin
                  st:= Format('Редактирована ВЗ #%d. %s', [Id, PrmStr]);
                  mes.Code:=R8_TZ_CHANGE;
                end;
                $8982:
                begin
                  st:= Format('Удалена ВЗ #%d. %s', [Id, PrmStr]);
                  mes.Code:=R8_TZ_DELETE;
                end;

                Else
                  UnknownEvent:= rbuf[16*i+9] + 256*rbuf[16*i+10];
                  
              end; //case события ВЗ

            end; //10:


            11://УД
            begin
              Id:= rbuf[16*i+5];
              mes.TypeDevice:= 4;
              TheKSBParam.WriteIntegerParam(mes, data, 'Номер УД', Id);
              TheKSBParam.WriteIntegerParam(mes, data, 'Номер пользователя', Prm);
              mes.Level:= Id;

              case rbuf[16*i+9]+256*rbuf[16*i+10] of
                $8A80:
                begin
                  st:= Format('Создан УД #%d. %s', [Id, PrmStr]);
                  mes.Code:= R8_UD_CREATE;
                end;
                $8A81:
                begin
                  st:= Format('Редактирован УД #%d. %s', [Id, PrmStr]);
                  mes.Code:= R8_UD_CHANGE;
                end;
                $8A82:
                begin
                  st:= Format('Удален УД #%d. %s', [Id, PrmStr]);
                  mes.Code:= R8_UD_DELETE;
                end;

                Else
                  UnknownEvent:= rbuf[16*i+9] + 256*rbuf[16*i+10];
              end; //case события УД

            end; //11:


            12: //Спецдаты
            begin
              mes.TypeDevice:= 4;
              case rbuf[16*i+9]+256*rbuf[16*i+10] of
                $8B81:
                begin
                  st:= Format('Редактированы праздники. %s', [PrmStr]);
                  mes.Code:= R8_HOLIDAY_EDITED;
                  TimerR8h.Enabled:= True;
                end;

                Else
                  UnknownEvent:= rbuf[16*i+9] + 256*rbuf[16*i+10];

              end;//case события Спецдат
            end; //12:

            5://Системные часы
            begin
              UnknownEvent:= rbuf[16*i+9] + 256*rbuf[16*i+10];
            end;
            6://Программа
            begin
              UnknownEvent:= rbuf[16*i+9] + 256*rbuf[16*i+10];
            end;
            7://Переменная
            begin
              UnknownEvent:= rbuf[16*i+9] + 256*rbuf[16*i+10];
            end;
            8://Звук
            begin
              UnknownEvent:= rbuf[16*i+9] + 256*rbuf[16*i+10];
            end;
            13://Скрипт инструкция
            begin
              UnknownEvent:= rbuf[16*i+9] + 256*rbuf[16*i+10];
            end;
            14://Название объекта
            begin
              UnknownEvent:= rbuf[16*i+9] + 256*rbuf[16*i+10];
            end;
            100://БЦП
            begin
              UnknownEvent:= rbuf[16*i+9] + 256*rbuf[16*i+10];
            end;


            Else
              UnknownEvent:= rbuf[16*i+9] + 256*rbuf[16*i+10];

          end; //case тип объекта


          // печать событий
          if UnknownEvent>0 then
          begin
            PrintEvent ('Неизвестный ответ БЦП >>');
            UnknownEvent:= 0;
          end;

          // печать и отправка на ВУ
          if mes.Code>0 then
          begin
            Log('SEND: ' + DateTimeToStr(UnPackTime(rbuf[16*i])) + ' ' + st);
            Send(mes);
          end
          else
            if length(st)>0 then
              Log(DateTimeToStr(UnPackTime(rbuf[16*i])) + ' ' + st);
          //
        end; //for
      end; //$8D:





      // Установлено время
      $89:
      if rbuf[5]=$0B then
      begin
        st:= Format('Дата/Время: %s', [ DateTimeToStr(UnPackTime(rbuf[13])) ]);
        Log('SEND: ' + st);
        Init(mes);
        mes.SysDevice:=SYSTEM_OPS;
        mes.NetDevice:=rub.NetDevice;
        mes.BigDevice:=rub.BigDevice;
        mes.TypeDevice:= 4;
        TheKSBParam.WriteDoubleParam(mes, data, 'Время', UnPackTime(rbuf[13]));
        mes.Code:= R8_GETTIME;
        Send(mes);
      end;




 //=================vvv==========================

      // Конфигурирование
      $84:
      begin
        if Option.WorkMode=2 then
          exit;
        if rub.WBuf.Count>0 then
        begin
          t:= rub.WBuf.Items[0];
          move(t[0], m, 512);
        end
        else
          FillChar(m, 512, 0);


        case rbuf[13] of // тип объекта

          1: // Зона-тип
          case rbuf[14] of

            $1: //создание
            begin
              Id:= 256*m[255] + m[254];
              rub.LoadZN( m[9], Id );
              rub.SetIdZN( m[10], Id );
              TimerR8h.Enabled:= True;
            end;

            $2: //изменение
            begin
              pzn:= rub.FindZN(m[10], 0);
              if pzn<>nil then
              begin
                move(m[9], pzn^, sizeof(TZN)-3);
                TimerR8h.Enabled:= True;
              end;
            end;

            $3: //удаление
            begin
              pzn:= rub.FindZN(m[9], 0);
              if pzn<>nil then
              begin
                rub.ZN.Remove(pzn);
                Dispose(pzn);
                TimerR8h.Enabled:= True;
              end;
            end;

            $4: //удаление с дочерними ТС
            begin
            end;

            $5: //удаление всех
            begin
              while rub.ZN.Count>0 do begin
                pzn:= rub.ZN.Items[0];
                rub.ZN.Remove(pzn);
                Dispose(pzn);
              end;
              while rub.TC.Count>0 do begin
                ptc:= rub.TC.Items[0];
                rub.TC.Remove(ptc);
                Dispose(ptc);
              end;
              st:=DateTimeToStr(now) + ' Удалены все зоны';
              Log('SEND: '+st);
              Init(mes);
              mes.SysDevice:= SYSTEM_OPS;
              mes.NetDevice:= rub.NetDevice;
              mes.BigDevice:= rub.BigDevice;
              mes.TypeDevice:= 4;
              mes.Code:= R8_ZONE_ALL_DELETE;
              Send(mes);
              TimerR8h.Enabled:= True;
            end;

            $6: // Запрос конф.
            begin
            end;

            $7: //Запрос списка
            begin
              rub.LoadZN(rbuf[15], 0);
            end;

          end;// case rbuf[14] of


          

          2: // ТС-тип
          case rbuf[14] of

            $1://создание
            begin
              Id:= 256*m[253] + m[252];
              rub.LoadTC( m[9], Id, 256*m[255] + m[254] );
              rub.SetIdTC( 256*m[12] + m[11], m[13], Id );
              TimerR8h.Enabled:= True;
            end;
            $2: //изменение
            begin
              ptc:= rub.FindTC(m[11], 0);
              if ptc<>nil then
              begin
                move(m[9], ptc^, sizeof(TTC)-8);
                TimerR8h.Enabled:= True;
              end;
            end;

            $3: //удаление
            begin
              ptc:= rub.FindTC(m[11], 0);
              if ptc<>nil then
              begin
                rub.TC.Remove(ptc);
                Dispose(ptc);
                TimerR8h.Enabled:= True;
              end;
            end;

            $4: //запрос конфигурации
            begin
            end;

            $5: //запрос списка зоны
            begin
            end;

            $6: // запрос списка
            begin
              rub.LoadTC(rbuf[15], 0, 0);
            end;
          
          end;




          3: // СУ
          case rbuf[14] of

            $1://создание
            begin
              Id:= 256*m[255] + m[254];
              rub.LoadCU( m[9], Id );
              rub.SetIdCU( 65536*m[9] + 256*m[11] + m[10], Id );
              TimerR8h.Enabled:= True;
            end;
            $2: //изменение
            begin
              pcu:= rub.FindCU(m[9], 0);
              if pcu<>nil then
              begin
                move(m[9], pcu^, sizeof(TCU)-3);
                TimerR8h.Enabled:= True;
              end;
            end;
            $3: //удаление
            begin
              pcu:= rub.FindCU(m[9], 0);
              if pcu<>nil then
              begin
                rub.CU.Remove(pcu);
                Dispose(pcu);
                TimerR8h.Enabled:= True;
              end;
            end;

            $4: //удаление всех
            begin
              while rub.CU.Count>0 do begin
                pcu:= rub.CU.Items[0];
                rub.CU.Remove(pcu);
                Dispose(pcu);
              end;
              st:= DateTimeToStr(now) + ' Удалены все СУ';
              Log('SEND: '+st);
              Init(mes);
              mes.SysDevice:= SYSTEM_OPS;
              mes.NetDevice:= rub.NetDevice;
              mes.BigDevice:= rub.BigDevice;
              mes.TypeDevice:= 4;
              mes.Code:= R8_CU_ALL_DELETE;
              Send(mes);
              TimerR8h.Enabled:= True;
            end;

            $5: //запрос конф.
            begin
             { pcu:= rub.FindCU(256*rbuf[17]+rbuf[16]+65536*rbuf[15], 0);
              if pcu=nil
                then rub.LoadCU(rbuf[15], rub.Cmd.cu.Number)
                else move(rbuf[15], pcu^, sizeof(TCU)-3);
              TimerR8h.Enabled:= True;}
            end;

            $6: //Запрос списка
              rub.LoadCU(rbuf[15], 0);

            $0c:
            begin
              st:=DateTimeToStr(now) + ' СУ: Вход в режим конфигурирования БЦП';
              Log(st);
            end;

            $0d:
            begin
              st:=DateTimeToStr(now) + ' СУ: Выход из режима конфигурирования БЦП';
              Log(st);
            end;

            else
              UnknownEvent:= rbuf[14];

          end;// 3:




          4: // User-тип
          case rbuf[14] of

            $1: //создание
            begin
              //Id:= 256*m[11] + m[10];
              rub.LoadUS(m[9]);
              TimerR8h.Enabled:= True;
            end;

            $2: //изменение
            begin
              Id:= 256*m[11] + m[10];
              pus:= rub.FindUS(Id);
              if pus<>nil then
              begin
                move(m[9], pus^, sizeof(TUS));
                TimerR8h.Enabled:= True;
              end;
            end;

            $3: //удаление
            begin
              Id:= 256*m[10] + m[9];
              pus:= rub.FindUS(Id);
              i:= 0;
              if pus<>nil then
              begin
                i:= rub.FindUSInScuUserMap(pus^.Id);
                rub.US.Remove(pus);
                Dispose(pus);
              end;
              TimerR8h.Enabled:= True;
              //
              if i<>0 then
              begin
                rub.ScuUserMap[i]:= 0;
                WriteScuUserMap('СКУ-БЦП', IntToStr(i), '');
                rub.DelUserAllScu(i);
              end;
            end;

            $4: //удаление всех
             begin
              if rub.US.Count>0 then
              for i:= rub.US.Count-1 downto 0 do
              begin
                pus:= rub.US.Items[i];
                Dispose(pus);
                rub.US.Delete(i);
              end;
              st:=DateTimeToStr(now) + ' Удалены все пользователи';
              Log('SEND: '+st);
              Init(mes);
              mes.SysDevice:= SYSTEM_OPS;
              mes.NetDevice:= rub.NetDevice;
              mes.BigDevice:= rub.BigDevice;
              mes.TypeDevice:= 4;
              mes.Code:= R8_USER_ALL_DELETE;
              Send(mes);
              TimerR8h.Enabled:= True;
            end;

            $5: //
            begin
              pus:= rub.FindUS(256*rbuf[17]+rbuf[16]);
              if pus=nil then
                rub.LoadUS(rbuf[15])
              else
                move(rbuf[15], pus^, sizeof(TUS));
              TimerR8h.Enabled:= True;


              //scu sync
              pus:= rub.FindUS(256*rbuf[17]+rbuf[16]);
              if pus^.Id=( pus^.IdentifierCode[1] + pus^.IdentifierCode[2]*256 ) then
              begin
                if ((pus^.Flags shr 5) and $03)=2 then
                if rub.FindUSInScuUserMap(pus^.Id) = 0 then
                begin
                  i:= rub.FindEmptyIdScuUser;
                  if i=0 then
                    Log('Заполнена база пользователей СКУ-02 !')
                  else begin
                    rub.ScuUserMap[i]:= pus^.Id;                                        //Запись в ScuUserMap
                    WriteScuUserMap('СКУ-БЦП', IntToStr(i), IntToStr(pus^.Id));         //Запись в файл
                    rub.AddUserAllScu(                                                  //Отправка во все СКУ-02
                      i,
                      pus^.IdentifierCode[0],
                      pus^.IdentifierCode[1] + pus^.IdentifierCode[2]*256,
                      pus^.PinCode
                      );
                  end;
                end;
              end

              else begin
                i:= rub.FindUSInScuUserMap(pus^.Id);
                if i>0 then
                begin
                  rub.ScuUserMap[i]:= 0;                                              //Запись в ScuUserMap
                  WriteScuUserMap('СКУ-БЦП', IntToStr(i), '');                        //Запись в файл
                  rub.DelUserAllScu(i);                                               //Отправка во все СКУ-02
                end;
              end;
              //scu sync


            end;

            $6:
              rub.LoadUS(rbuf[15]);

          end; //4


          9: //Группа-тип
          case rbuf[14] of
            $1:;
            $2:;
            $3:;
            $4:
            begin
              if rub.GR.Count>0 then
              for i:= rub.GR.Count-1 downto 0 do
              begin
                pgr:= rub.GR.Items[i];
                Dispose(pgr);
                rub.GR.Delete(i);
              end;
              st:=DateTimeToStr(now)+ ' Удалены все группы';
              Log('SEND: '+st);
              Init(mes);
              mes.SysDevice:= SYSTEM_OPS;
              mes.NetDevice:= rub.NetDevice;
              mes.BigDevice:= rub.BigDevice;
              mes.TypeDevice:= 4;
              mes.Code:= R8_GR_DELETEALL;
              Send(mes);
              TimerR8h.Enabled:= True;
            end;
            $5:
            begin
              pgr:=rub.FindGR(rbuf[15]);
              if pgr=nil
                then rub.LoadGR(rbuf[15])
                else  move(rbuf[15], pgr^, sizeof(TGR));
              TimerR8h.Enabled:= True;
            end;
            $6: //запрос списка
              rub.LoadGR(rbuf[15]);
            else Log('$84: Группа = '+inttostr(rbuf[14])); ;
          end; //case & 9


          10:// ВЗ
          begin
            case rbuf[14] of
              $1,2:; //создание
              $3,4:; //изменение
              $5:;   //удаление
              $6:    //удаление всех
              begin
                if rub.TI.Count>0 then
                for i:= rub.TI.Count-1 downto 0 do
                begin
                  pti:= rub.TI.Items[i];
                  Dispose(pti);
                  rub.TI.Delete(i);
                end;
                st:=DateTimeToStr(now) + ' Удалены все ВЗ';
                Log('SEND: '+st);
                Init(mes);
                mes.SysDevice:= SYSTEM_OPS;
                mes.NetDevice:= rub.NetDevice;
                mes.BigDevice:= rub.BigDevice;
                mes.TypeDevice:= 4;
                mes.Code:= R8_TZ_ALL_DELETE;
                Send(mes);
                TimerR8h.Enabled:= True;
              end;
              $7: //Запрос списка
              begin
                rub.LoadTI(rbuf[15]);
              end;
              else Log('$84: ВЗ = '+inttostr(rbuf[14])); ;
            end;//case rbuf[14] of

            if (Retcode<>0)and(rbuf[14]=7) then
              TimerR8h.Enabled:= True;
          end;//10

          11:// УД
          begin
            case rbuf[14] of

              $1: //создание1
              begin
                rub.DeleteUD( m[10] );
                rub.LoadPR( m[9] );
                TimerR8h.Enabled:= True;
              end;

              2: //создание2
              begin
                if rub.FindPR(m[10]) = Nil then
                  exit;
                rub.LoadPR( m[9] );
                TimerR8h.Enabled:= True;
              end;

              $3: //изменение1
              begin
                rub.DeleteUD( m[10] );
                rub.LoadPR( m[9] );
                TimerR8h.Enabled:= True;
              end;

              4: //изменение2
              begin
                if rub.FindPR(m[10]) = Nil then
                  exit;
                rub.LoadPR( m[9] );
                TimerR8h.Enabled:= True;
              end;

              $5:   //удаление
              begin
                rub.DeleteUD( m[9] );
                TimerR8h.Enabled:= True;
              end;

              $6:    //удаление всех
              begin
                if rub.PR.Count>0 then
                for i:= rub.PR.Count-1 downto 0 do
                begin
                  ppr:= rub.PR.Items[i];
                  Dispose(ppr);
                  rub.PR.Delete(i);
                end;
                st:=DateTimeToStr(now) + ' Удалены все УД';
                Log('SEND: '+st);
                Init(mes);
                mes.SysDevice:= SYSTEM_OPS;
                mes.NetDevice:= rub.NetDevice;
                mes.BigDevice:= rub.BigDevice;
                mes.TypeDevice:= 4;
                mes.Code:= R8_UD_ALL_DELETE;
                Send(mes);
                TimerR8h.Enabled:= True;
              end;

              $7:
                rub.LoadPR(rbuf[15]);
              else Log('$84: УД = '+inttostr(rbuf[14])); ;
            end;//case
          end; // 11


          12: // Праздники
          case rbuf[14] of
            $1:; //Редактирование всех
            $2: //Запрос
              rub.LoadHD(rbuf[15]);
            else Log('$84: HD = '+inttostr(rbuf[14]));
          end;//case rbuf[14] of
            {
            st:=DateTimeToStr(now) + '  праздники';
            Log('SEND: '+st);
            mes.SysDevice:=SYSTEM_OPS;
            mes.NetDevice:=rub.NetDevice;
            mes.BigDevice:=rub.BigDevice;
            mes.TypeDevice:=4;
            mes.Code:= R8_HOLIDAY_SET;
            send(mes);
            TimerR8h.Enabled:= True;
            }


          14: // Названия
          case rbuf[14] of
            $1:;//создание
            $2:;//изменение
            $3:;//удаление
            $4: //удаление всех
            begin
              if rub.RN.Count>0 then
              for i:= rub.RN.Count-1 downto 0 do
              begin
                prn:= rub.RN.Items[i];
                Dispose(prn);
                rub.RN.Delete(i);
              end;
              st:=DateTimeToStr(now) + ' Удалены все названия';
              Log('SEND: '+st);
              Init(mes);
              mes.SysDevice:= SYSTEM_OPS;
              mes.NetDevice:= rub.NetDevice;
              mes.BigDevice:= rub.BigDevice;
              mes.TypeDevice:= 4;
              mes.Code:= R8_RN_ALL_DELETE;
              Send(mes);
              TimerR8h.Enabled:= True;
            end;
            $5:; //запрос конф.
            $6: //Запрос списка
              rub.LoadRN(rbuf[15]);

            else Log('$84: RN = '+inttostr(rbuf[14]));
          end;//case & 14


          6: // Программы
          case rbuf[14] of
            $1:;//создание
            $2:;//изменение
            $3:;//удаление
            $4: //удаление всех
            begin
              if rub.RP.Count>0 then
              for i:= rub.RP.Count-1 downto 0 do
              begin
                prp:= rub.RP.Items[i];
                Dispose(prp);
                rub.RP.Delete(i);
              end;
              st:=DateTimeToStr(now) + ' Удалены все программы';
              Log('SEND: '+st);
              Init(mes);
              mes.SysDevice:= SYSTEM_OPS;
              mes.NetDevice:= rub.NetDevice;
              mes.BigDevice:= rub.BigDevice;
              mes.TypeDevice:= 4;
              mes.Code:= R8_RP_ALL_DELETE;
              Send(mes);
              TimerR8h.Enabled:= True;
            end;
            $5:; //запрос конф.
            $6: //Запрос списка
              rub.LoadRP(rbuf[15]);
            else Log('$84: RP = '+inttostr(rbuf[14]));
          end;//case & 6


          13: // Инструкции
          case rbuf[14] of
            $1:;//создание
            $2: //запрос списка
              rub.LoadRI(rbuf[15]);
            else Log('$84: RI = '+inttostr(rbuf[14]));
          end;//case & 13

        end;//case

      end;//$84:



 //=================^^^==========================


      // БЦП-инфо
      $95:
      begin
        st:= '';
        for i:=0 to 31 do
          st:= st + Chr(rbuf[24+i]);
        st:= Format('Номер БЦП %d Версия БЦП %d.%d.%d, Версия БД %d.%d', [ rbuf[3] + 256*rbuf[4], rbuf[13], rbuf[14], rbuf[17]+256*rbuf[18], rbuf[15], rbuf[16] ]);
        //st:= Format('Версия БЦП %d.%d.%d, Версия БД %d.%d; Дата: %s. Тип БЦП: %d; Описание: %s', [ rbuf[13], rbuf[14], rbuf[17]+256*rbuf[18], rbuf[15], rbuf[16], DateTimeToStr(UnPackTime(rbuf[19])),  rbuf[23], st ]);
        Log(st);
      end;


      // системные ошибки
      $96:
      if (rbuf[14] + 256*rbuf[15])>0 then
      begin
        rub.ErrorCode:= rbuf[16+12]+256*rbuf[16+13];
        st:= DateTimeToStr(UnPackTime(rbuf[16]))+ ' Системная ошибка БЦП. Ошибка #' + inttostr(rub.ErrorCode) + ' (' + HWTypeBCPError(rub.ErrorCode)+')';
        Log(st);
      end
      else
        rub.ErrorCode:= $FF;


      // прочие
      $81..$83:;
      $87, $8e:;
      $88, $8f:;
      $90..$94:;
      $97..$99:;
      $8a..$8c:;


      else
        UnknownEvent:= rbuf[10];

    end; // case rbuf[10]


    if Log_NUOs then
      Log( Format ('>> NUOs=%d', [lNUO.Count] ) );

    // печать несобытий  
    if UnknownEvent>0 then
    begin
      PrintEvent ('Неизвестный ответ БЦП >>');
    end;


  EXCEPT
    On E: Exception do
      PrintEvent('RBcpException (' + E.Message + ')');


  END;//////

  if Option.Log_Delay then
  begin
   QueryPerformanceCounter(_c2.QuadPart);
   Log('CountOnRead ['+inttostr(rbuf[10])+'] : '+FloatToStr((_c2.QuadPart-_c1.QuadPart)/_f.QuadPart));
  end;

  end;// with rbcp

end;


//-----------------------------------------------------------------------------
procedure UpdateTcUser(p: pointer);
var
  ptc: ^TTC;
  i: word;

begin
  if (p = Nil) then
    exit;

  ptc:= p;
  if ptc^.tempUser > 0 then
    exit;

  for i:=1 to rub.TC.Count do
  begin
    if PTTC(rub.TC.Items[i-1])^.ZoneNumber = ptc^.ZoneNumber then
    if PTTC(rub.TC.Items[i-1])^.Kind in [1..3] then
    if PTTC(rub.TC.Items[i-1])^.tempUser>0 then
    begin
      ptc^.tempUser:= PTTC(rub.TC.Items[i-1])^.tempUser;
      break;
    end;
  end;

end;


procedure CalcStateZN(
  zn: word;
  PrmKind: byte = 0;
  Prm: word = 0;
  Us: word = 0);

var
  i: word;
  p: PTTC;
  pzn: PTZN;
  m: array [0..1] of byte;
  mes: KSBMES;
  data: PChar;
  tState: byte;
  IsEmpty: boolean;
  IsAllOff: boolean;
  User: word;
  PrmStr, tStr: AnsiString;

begin
  data:= '';
  m[0]:= lo(zn);
  m[1]:= hi(zn);
  pzn:= rub.FindZN(m, 1);
  if pzn=nil then
    exit;


  tState:= $03;      // тек. оптим. сост. зоны

  User:= Prm;        // тек. польз.
  IsEmpty:= True;    // пустая
  IsAllOff:= True;   // все тс откл.
  tStr:= '';

  
  for i:=1 to rub.TC.Count do
  begin
    p:= rub.TC.Items[i-1];
    if (p^.ZoneNumber<>zn) then
      continue;
    if not(p^.Kind in [1..4]) then
      continue;

    IsEmpty:= False;
    tStr:= tStr + Format(' -> ШС #%d [%.4d]=%.2x', [p^.Number, p^.Sernum, p^.State]);

    if (p^.State and $40)>0 then
    begin
      tState:= tState or $40;
      // должен быть 1F=0
      //if (p^.State and $1F)>0 then
      //  aMain.Log( 'Сост. зоны #'+inttostr(zn)+' ((p^.State and $1F)>0 ): $'+IntToHex(p^.State, 2)+' TC N=$'+IntToHex(p^.Number, 2) );
      continue;
    end;

    tState:= tState or (p^.State and $1c); // o-н-т
    if (p^.State and $10)=0 then
      IsAllOff:= False;

    // 0 и 1 бит при откл (4 бит = 1)
    if p^.Kind in [1..3] then
    begin
      if (p^.State and $12)=0 then
        tState:= tState and $fd; // снят
      if (p^.State and $11)=0 then
        tState:= tState and $fe; // нг
    end;
  end;//for


  // СИГМА ляп-ИС
  if PrmKind in [0,1,2,6,7,10,11] then
  if User=0 then
    User:= Us;

    
  if IsAllOff then
    tState:= $11;
  if IsEmpty then
    tState:= $01;

  with aMain, option do begin

    // печать
    {Log('Log_State: ' + Format(
      'Сост. зоны #%d:  $%x -> $%x, Польз.=%d, PrmKind=%d, comd=%d %s',
      [zn, pzn^.State, tState, User, PrmKind, ord(comd), tStr]
      ));
    }

    if PrmKind>0
      then PrmStr:= Format('%s #%d', [ PrmName[PrmKind], User ])
      else PrmStr:= '';

      
    if WorkTime then
    begin
      Init(mes);
      mes.SysDevice:= SYSTEM_OPS;
      mes.NetDevice:= rub.NetDevice;
      mes.BigDevice:= rub.BigDevice;
      mes.SmallDevice:= zn;
      mes.TypeDevice:= 6;

      // Готовность
      if (tState and $01)<>(pzn^.State and $01) then
      if (tState and $01)=0 then
      begin
        Log(Format('SEND: Зона #%d [%s] не готова ', [pzn^.Number, ObjectNumberToStr(pzn^.BCPNumber)]));
        mes.Code:= R8_ZONE_NOTREADY;
        Send(mes);
      end
      else
      begin
        Log(Format('SEND: Зона #%d [%s] готова', [pzn^.Number, ObjectNumberToStr(pzn^.BCPNumber)]));
        mes.Code:= R8_ZONE_READY;
        Send(mes);
      end;

      // Охрана
      if (tState and $02)<>(pzn^.State and $02) then
      if (tState and $02)=0 then
      begin
        Log(Format('SEND: Зона #%d [%s] без охраны. %s', [pzn^.Number, ObjectNumberToStr(pzn^.BCPNumber), PrmStr]));
        mes.Code:= R8_ZONE_DISARMED;
        TheKSBParam.WriteIntegerParam(mes, data, 'Номер пользователя', User);
        Send(mes);
      end
      else
      begin
        Log(Format('SEND: Зона #%d [%s] на охране. %s', [pzn^.Number, ObjectNumberToStr(pzn^.BCPNumber), PrmStr]));
        mes.Code:= R8_ZONE_ARMED;
        TheKSBParam.WriteIntegerParam(mes, data, 'Номер пользователя', User);
        Send(mes);
      end;

      // Восстановление
      if (tState and $0c)<>(pzn^.State and $0c) then
      if (tState and $0c)=0 then
      begin
        Log(Format('SEND: Зона #%d [%s] восстановлена. Пользователь #%d', [pzn^.Number, ObjectNumberToStr(pzn^.BCPNumber), User]));
        mes.Code:= R8_ZONE_RESTORE;
        TheKSBParam.WriteIntegerParam(mes, data, 'Номер пользователя', User);
        Send(mes);
      end;

      // Тревога
      if (tState and $04)<>(pzn^.State and $04) then
      if (tState and $04)>0 then
      begin
        Log(Format('SEND: Зона #%d [%s] в тревоге', [pzn^.Number, ObjectNumberToStr(pzn^.BCPNumber)]));
        mes.Code:= R8_ZONE_ALARM;
        Send(mes);
      end;

      // Неисправность
      if (tState and $08)<>(pzn^.State and $08) then
      if (tState and $08)>0 then
      begin
        Log(Format('SEND: Зона #%d [%s] неисправна', [pzn^.Number, ObjectNumberToStr(pzn^.BCPNumber)]));
        mes.Code:= R8_ZONE_CHECK;
        Send(mes);
      end;

      // Откл.
      if (tState and $10)<>(pzn^.State and $10) then
      if (tState and $10)>0 then
      begin
        Log(Format('SEND: В зоне #%d [%s] есть откл. ШС', [pzn^.Number, ObjectNumberToStr(pzn^.BCPNumber)]));
        mes.Code:= R8_ZONE_SH_OFF;
        Send(mes);
      end
      else
      begin
        Log(Format('SEND: В зоне #%d [%s] нет откл. ШС', [pzn^.Number, ObjectNumberToStr(pzn^.BCPNumber)]));
        mes.Code:= R8_ZONE_SH_ON;
        Send(mes);
      end;

      // Нет данных
      if (tState and $40)<>(pzn^.State and $40) then
      if (tState and $40)>0 then
      begin
        Log(Format('ИНФО: В зоне #%d [%s] есть ШС с неизвестным состоянием', [pzn^.Number, ObjectNumberToStr(pzn^.BCPNumber)]));
      end
      else
      begin
        Log(Format('ИНФО: В зоне #%d [%s] нет ШС с неизвестным состоянием', [pzn^.Number, ObjectNumberToStr(pzn^.BCPNumber)]));
      end;
    end;

  end;//with

  pzn^.State:= tState;
end;


//--------------------------------
function APModeToRostek(ptc: pointer): byte;
var
 p: PTTC;
begin
 p:= ptc;
 // БЦП реж.: 0-Код или Карта, 1-Код и Карта, 2-Карта и Дверной код, 3-Дверной код
 // ТД бит сост.: неизв. - откл. - н - (3бита: 1-Норма, 2-Дверь открыта, 3-Дверь не закрыта, 4-Взлом, 5-Заблокировано, 6-Разблокировано, 7-Нападение)
 // Rostek режим: 0-Закрыто, 1-Карта, 2-Код или карта, 3-Код и карта, 4-Открыто, 5-Фасилити, 6,7-Резерв, 8-Не актиивен
 Result:= 8;
 case (p^.ConfigDummy[0] shr 1) and $03 of
   0: Result:= 2; //Код или Карта
   1: Result:= 3; //Код и Карта
   2: Result:= 9; //Карта и Дверной код
   3: Result:= 10; //Дверной код
 end;
 case (p^.State and $0F) of
   5: Result:= 0; //Заблокирована
   6: Result:= 4; //Разблокирована
 end;
 if (p^.Flags and $08)=0 then
   Result:= 8; //Не активен
end;


function APStateToRostek(ptc: pointer): byte;
var
 p: PTTC;
begin
 p:= ptc;
 // ТД бит сост.: неизв. - откл. - н - (3бита: 1-Норма, 2-Дверь открыта, 3-Дверь не закрыта, 4-Взлом, 5-Заблокировано, 6-Разблокировано, 7-Нападение)
 // Rostek сост.: 0-Нет связи, 1-Готов, 2-Доступ разрешен, 3-Доступ запрещен, 4-Тревога, 5-Открыто, 6-Закрыто, 7-Несправность
 if (p^.State and $10)>0 then Result:= 0 //0-Нет связи
   else if (p^.State and $28)>0 then Result:= 7 //0-Неисправность
     else case p^.State of
       $01: Result:= 1; //Норма/Готов +
       $02: Result:= 2; //Дверь открыта/Доступ разрешен +
       $03: Result:= 4; //Удержание/Тревога +
       $04: Result:= 4; //Взлом/Тревога +
       $05: Result:= 6; //Заблокирована/Закрыто +
       $06: Result:= 5; //Разблокирована/Открыто +
       $07: Result:= 4; //Нападение/Тревога +
       else Result:= 7; //0-Неисправность
     end;
end;



end.




{
Удалил из событий. надо вставить в 84
                  if pzn<>nil then
                  begin
                    rub.ZN.Remove(pzn);
                    Dispose(pzn);
                  end;
}

{
typedevice для 8301
}


{
cu тип    mes.TypeDevice:= 4;
}


{
удалено по 8580, 8581

                  mGetUser(rbuf[16*i+5]+rbuf[16*i+6]*256);
                  в запросе устанавливаются пользователи всех СКУ
}



{!!!! ОТРАБОТАНО
удалено по 8582
                  rub.US.Remove(pus);
                  Dispose(pus);
                  TimerR8h.Enabled:= True;
}


{
удалено по 8880, 8881

                  mGetGR(rbuf[16*i+5]);
}



{
удалено по 8882
                  pgr:= rub.FindGR(rbuf[16*i+5]);
                  rub.GR.Remove(pgr);
                  Dispose(pgr);
                  TimerR8h.Enabled:= True;
}



{

удалено по 8A80
                  rub.DeleteUD( rbuf[16*i+5] );
                  {
                  for j:=rub.PR.Count downto 1 do
                  begin
                    ppr:=rub.PR.Items[j-1];
                    if ppr^.AL=rbuf[16*i+5] then
                    begin
                      rub.PR.Remove(ppr);
                      Dispose(ppr);
                    end;
                  end;
                  }
                  {mPreGetListPravo(rbuf[16*i+5]);}


}


{
удалено по 8A81
                  rub.DeleteUD( rbuf[16*i+5] );
                  {
                  for j:=rub.PR.Count downto 1 do
                  begin
                    ppr:=rub.PR.Items[j-1];
                    if ppr^.AL=rbuf[16*i+5] then
                    begin
                      rub.PR.Remove(ppr);
                      Dispose(ppr);
                    end;
                  end;
                  }
                  {mPreGetListPravo(rbuf[16*i+5]);}

}


{
удалено по 8A82

                  for j:=rub.PR.Count downto 1 do
                  begin
                    ppr:= rub.PR.Items[j-1];
                    if ppr^.AL=rbuf[16*i+5] then
                    begin
                      rub.PR.Remove(ppr);
                      Dispose(ppr);
                    end;
                  end;
                  TimerR8h.Enabled:= True;

}



{
все события 84
}
